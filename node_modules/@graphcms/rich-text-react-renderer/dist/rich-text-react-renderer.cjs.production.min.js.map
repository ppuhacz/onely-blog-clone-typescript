{"version":3,"file":"rich-text-react-renderer.cjs.production.min.js","sources":["../src/elements/Audio.tsx","../src/elements/Image.tsx","../src/elements/Video.tsx","../src/defaultElements.tsx","../src/elements/Link.tsx","../src/elements/Class.tsx","../src/elements/IFrame.tsx","../src/RenderText.tsx","../src/RichText.tsx"],"sourcesContent":["import React from 'react';\n\nexport type AudioProps = {\n  url: string;\n};\n\nexport function Audio({ url }: AudioProps) {\n  return (\n    <audio\n      style={{ display: 'block', maxWidth: '100%', height: 'auto' }}\n      src={url}\n      controls\n    >\n      <p>\n        Your browser doesn't support HTML5 audio. Here is a{' '}\n        <a href={url}>link to the audio</a> instead.\n      </p>\n    </audio>\n  );\n}\n","import React from 'react';\nimport escapeHtml from 'escape-html';\nimport { ImageProps } from '@graphcms/rich-text-types';\n\nexport function Image({\n  src,\n  width,\n  height,\n  altText,\n  title,\n}: Partial<ImageProps>) {\n  if (__DEV__ && !src) {\n    console.warn(\n      `[@graphcms/rich-text-react-renderer]: src is required. You need to include a \\`url\\` in your query`\n    );\n  }\n\n  const shouldIncludeWidth = width && width > 0;\n  const shouldIncludeHeight = height && height > 0;\n\n  return (\n    <img\n      loading=\"lazy\"\n      src={escapeHtml(src)}\n      {...(shouldIncludeWidth && { width })}\n      {...(shouldIncludeHeight && { height })}\n      alt={altText}\n      title={title}\n    />\n  );\n}\n","import React from 'react';\nimport escapeHtml from 'escape-html';\nimport { VideoProps } from '@graphcms/rich-text-types';\n\nexport function Video({ src, width, height, title }: Partial<VideoProps>) {\n  return (\n    <video\n      src={escapeHtml(src)}\n      controls\n      width={width || '100%'}\n      height={height || '100%'}\n      title={title}\n    >\n      <p>\n        Your browser doesn't support HTML5 video. Here is a{' '}\n        <a href={src}>link to the video</a> instead.\n      </p>\n    </video>\n  );\n}\n","import React, { Fragment } from 'react';\nimport { RichTextProps } from './types';\n\nimport { IFrame, Image, Video, Class, Link, Audio } from './elements';\n\nfunction FallbackForCustomAsset({ mimeType }: { mimeType: string }) {\n  if (__DEV__) {\n    console.warn(\n      `[@graphcms/rich-text-react-renderer]: Unsupported mimeType encountered: ${mimeType}. You need to write your renderer to render it since we are not opinionated about how this asset should be rendered (check our docs for more info).`\n    );\n  }\n\n  return <Fragment />;\n}\n\nexport const defaultElements: Required<RichTextProps['renderers']> = {\n  a: Link,\n  class: Class,\n  video: Video,\n  img: Image,\n  iframe: IFrame,\n  blockquote: ({ children }) => <blockquote>{children}</blockquote>,\n  ul: ({ children }) => <ul>{children}</ul>,\n  ol: ({ children }) => <ol>{children}</ol>,\n  li: ({ children }) => <li>{children}</li>,\n  p: ({ children }) => <p>{children}</p>,\n  h1: ({ children }) => <h1>{children}</h1>,\n  h2: ({ children }) => <h2>{children}</h2>,\n  h3: ({ children }) => <h3>{children}</h3>,\n  h4: ({ children }) => <h4>{children}</h4>,\n  h5: ({ children }) => <h5>{children}</h5>,\n  h6: ({ children }) => <h6>{children}</h6>,\n  table: ({ children }) => <table>{children}</table>,\n  table_head: ({ children }) => <thead>{children}</thead>,\n  table_body: ({ children }) => <tbody>{children}</tbody>,\n  table_row: ({ children }) => <tr>{children}</tr>,\n  table_cell: ({ children }) => <td>{children}</td>,\n  table_header_cell: ({ children }) => <th>{children}</th>,\n  bold: ({ children }) => <b>{children}</b>,\n  italic: ({ children }) => <i>{children}</i>,\n  underline: ({ children }) => <u>{children}</u>,\n  code: ({ children }) => <code>{children}</code>,\n  code_block: ({ children }) => (\n    <pre\n      style={{\n        whiteSpace: 'pre',\n        wordWrap: 'break-word',\n        overflowX: 'auto',\n        WebkitOverflowScrolling: 'touch',\n        fontFamily: 'monospace',\n      }}\n    >\n      {children}\n    </pre>\n  ),\n  list_item_child: ({ children }) => <>{children}</>,\n  Asset: {\n    audio: props => <Audio {...props} url={props.url} />,\n    image: props => <Image {...props} src={props.url} />,\n    video: props => <Video {...props} src={props.url} />,\n    font: FallbackForCustomAsset,\n    application: FallbackForCustomAsset,\n    model: FallbackForCustomAsset,\n    text: FallbackForCustomAsset,\n  },\n  embed: {},\n  link: {},\n};\n","import React from 'react';\nimport escapeHtml from 'escape-html';\nimport { LinkElement } from '@graphcms/rich-text-types';\nimport { LinkRendererProps } from '../types';\n\nexport function Link({ children, ...rest }: LinkRendererProps) {\n  const { href, rel, id, title, openInNewTab, className } = rest;\n\n  const props: Pick<LinkElement, 'rel' | 'id' | 'title' | 'className'> & {\n    target?: string;\n  } = {};\n\n  if (rel) props.rel = rel;\n  if (id) props.id = id;\n  if (title) props.title = title;\n  if (className) props.className = className;\n  if (openInNewTab) props.target = '_blank';\n\n  return (\n    <a href={escapeHtml(href)} {...props}>\n      {children}\n    </a>\n  );\n}\n","import React from 'react';\nimport { ClassRendererProps } from '../types';\n\nexport function Class({ className, children }: ClassRendererProps) {\n  return <div className={className}>{children}</div>;\n}\n","/* eslint-disable jsx-a11y/iframe-has-title */\nimport React from 'react';\nimport escapeHtml from 'escape-html';\nimport { IFrameProps } from '@graphcms/rich-text-types';\n\nexport function IFrame({ url }: Partial<IFrameProps>) {\n  return (\n    <div\n      style={{\n        position: 'relative',\n        overflow: 'hidden',\n        width: '100%',\n        paddingTop: '56.25%',\n      }}\n    >\n      <iframe\n        style={{\n          position: 'absolute',\n          top: 0,\n          bottom: 0,\n          right: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n        }}\n        src={escapeHtml(url)}\n        loading=\"lazy\"\n        allow=\"fullscreen\"\n        frameBorder=\"0\"\n        referrerPolicy=\"no-referrer\"\n      />\n    </div>\n  );\n}\n","import React, { ReactNode } from 'react';\nimport { Text } from '@graphcms/rich-text-types';\n\nimport { RichTextProps, NodeRendererType } from './types';\n\nfunction serialize(text: string) {\n  if (text.includes('\\n')) {\n    const splitText = text.split('\\n');\n\n    return splitText.map((line, index) => (\n      <React.Fragment key={index}>\n        {line}\n        {index === splitText.length - 1 ? null : <br />}\n      </React.Fragment>\n    ));\n  }\n\n  return text;\n}\n\nexport function RenderText({\n  textNode,\n  renderers,\n  shouldSerialize,\n}: {\n  textNode: Text;\n  renderers?: RichTextProps['renderers'];\n  shouldSerialize: boolean;\n}) {\n  const { text, bold, italic, underline, code } = textNode;\n\n  let parsedText: ReactNode = shouldSerialize ? serialize(text) : text;\n\n  const Bold: NodeRendererType['bold'] = renderers?.['bold'];\n  const Italic: NodeRendererType['italic'] = renderers?.['italic'];\n  const Underline: NodeRendererType['underline'] = renderers?.['underline'];\n  const Code: NodeRendererType['code'] = renderers?.['code'];\n\n  if (bold && Bold) {\n    parsedText = <Bold>{parsedText}</Bold>;\n  }\n\n  if (italic && Italic) {\n    parsedText = <Italic>{parsedText}</Italic>;\n  }\n\n  if (underline && Underline) {\n    parsedText = <Underline>{parsedText}</Underline>;\n  }\n\n  if (code && Code) {\n    parsedText = <Code>{parsedText}</Code>;\n  }\n\n  return <>{parsedText}</>;\n}\n","import React, { Fragment } from 'react';\nimport {\n  ElementNode,\n  EmptyElementsToRemove,\n  Node,\n  isElement,\n  isText,\n  isEmpty,\n  elementTypeKeys,\n} from '@graphcms/rich-text-types';\n\nimport { defaultElements } from './defaultElements';\nimport { RenderText } from './RenderText';\nimport { RichTextProps } from './types';\n\nfunction getArrayOfElements(content: RichTextProps['content']) {\n  return Array.isArray(content) ? content : content.children;\n}\n\nfunction RenderNode({\n  node,\n  parent,\n  renderers,\n  references,\n}: {\n  node: Node;\n  parent: Node | null;\n  renderers?: RichTextProps['renderers'];\n  references?: RichTextProps['references'];\n}) {\n  if (isText(node)) {\n    let text = node.text;\n\n    const shouldSerialize =\n      parent && isElement(parent) && parent.type !== 'code-block';\n\n    return (\n      <RenderText\n        textNode={{ ...node, text }}\n        renderers={renderers}\n        shouldSerialize={shouldSerialize as boolean}\n      />\n    );\n  }\n\n  if (isElement(node)) {\n    return (\n      <RenderElement\n        element={node}\n        renderers={renderers}\n        references={references}\n      />\n    );\n  }\n\n  const { type } = node as ElementNode;\n\n  if (__DEV__) {\n    console.warn(\n      `[@graphcms/rich-text-react-renderer]: Unknown node type encountered: ${type}`\n    );\n  }\n\n  return <Fragment />;\n}\n\nfunction RenderElement({\n  element,\n  renderers,\n  references,\n}: {\n  element: ElementNode;\n  renderers?: RichTextProps['renderers'];\n  references?: RichTextProps['references'];\n}) {\n  const { children, type, ...rest } = element;\n  const { nodeId, nodeType } = rest;\n\n  // Checks if the element is empty so that it can be removed.\n  if (type in EmptyElementsToRemove && isEmpty({ children })) {\n    return <Fragment />;\n  }\n\n  const isEmbed = nodeId && nodeType;\n\n  /**\n   * The .filter method returns an array with all elements found.\n   * Since there won't be duplicated ID's, it's safe to use the first element.\n   */\n  const referenceValues = isEmbed\n    ? references?.filter(ref => ref.id === nodeId)[0]\n    : null;\n\n  /**\n   * `id` is used to correctly find the props for the reference.\n   * If it's not present, we show an error and render a Fragment.\n   */\n  if (__DEV__ && isEmbed && !referenceValues?.id) {\n    console.error(\n      `[@graphcms/rich-text-react-renderer]: No id found for embed node ${nodeId}. In order to render custom embeds, \\`id\\` is required in your reference query.`\n    );\n\n    return <Fragment />;\n  }\n\n  /**\n   * `mimeType` is used to determine if the node is an image or a video.\n   * That's why this is required and we show an error if it's not present.\n   * Only for custom assets embeds.\n   */\n  if (\n    __DEV__ &&\n    isEmbed &&\n    nodeType === 'Asset' &&\n    !referenceValues?.mimeType\n  ) {\n    console.error(\n      `[@graphcms/rich-text-react-renderer]: No mimeType found for embed node ${nodeId}. In order to render custom assets, \\`mimeType\\` is required in your reference query.`\n    );\n\n    return <Fragment />;\n  }\n\n  /**\n   * `url` is needed to correctly render the image, video, audio or any other asset\n   * Only for custom assets embeds.\n   */\n  if (__DEV__ && isEmbed && nodeType === 'Asset' && !referenceValues?.url) {\n    console.error(\n      `[@graphcms/rich-text-react-renderer]: No url found for embed node ${nodeId}. In order to render custom assets, \\`url\\` is required in your reference query.`\n    );\n\n    return <Fragment />;\n  }\n\n  /**\n   * There's two options if the element is an embed.\n   * 1. If it isn't an asset, then we simply try to use the renderer for that model.\n   *  1.1 If we don't find a renderer, we render a Fragment and show a warning.\n   * 2. If it is an asset, then:\n   *  2.1 If we have a custom renderer for that specific mimeType, we use it.\n   *  2.2 If we don't have, we use the default mimeType group renderer (application, image, video...).\n   */\n  let elementToRender;\n\n  // Option 1\n  if (isEmbed && nodeType !== 'Asset') {\n    const element =\n      type === 'link'\n        ? renderers?.link?.[nodeType as string]\n        : renderers?.embed?.[nodeType as string];\n\n    if (element !== undefined) {\n      elementToRender = element;\n    } else {\n      // Option 1.1\n      console.warn(\n        `[@graphcms/rich-text-react-renderer]: No renderer found for custom ${type} nodeType ${nodeType}.`\n      );\n      return <Fragment />;\n    }\n  }\n\n  // Option 2\n  if (isEmbed && nodeType === 'Asset') {\n    const element = renderers?.Asset?.[referenceValues?.mimeType];\n\n    // Option 2.1\n    if (element !== undefined) {\n      elementToRender = element;\n    } else {\n      // Option 2.2\n      const mimeTypeGroup = referenceValues?.mimeType.split('/')[0];\n      elementToRender = renderers?.Asset?.[mimeTypeGroup];\n    }\n  }\n\n  const elementNodeRenderer = isEmbed\n    ? elementToRender\n    : renderers?.[elementTypeKeys[type] as keyof RichTextProps['renderers']];\n\n  const NodeRenderer = elementNodeRenderer as React.ElementType;\n\n  const props = { ...rest, ...referenceValues };\n\n  if (NodeRenderer) {\n    return (\n      <NodeRenderer {...props}>\n        <RenderElements\n          content={children as ElementNode[]}\n          renderers={renderers}\n          references={references}\n          parent={element}\n        />\n      </NodeRenderer>\n    );\n  }\n\n  return <Fragment />;\n}\n\ntype RenderElementsProps = RichTextProps & {\n  parent?: Node | null;\n};\n\nfunction RenderElements({\n  content,\n  references,\n  renderers,\n  parent,\n}: RenderElementsProps) {\n  const elements = getArrayOfElements(content);\n\n  return (\n    <>\n      {elements.map((node, index) => {\n        return (\n          <RenderNode\n            node={node}\n            parent={parent || null}\n            renderers={renderers}\n            references={references}\n            key={index}\n          />\n        );\n      })}\n    </>\n  );\n}\n\nexport function RichText({\n  content,\n  renderers: resolvers,\n  references,\n}: RichTextProps) {\n  // Shallow merge doensn't work here because if we spread over the elements, the\n  // Asset object will be completly overriden by the resolvers. We need to keep\n  // the default elements for the Asset that hasn't been writen.\n  const assetRenderers = {\n    ...defaultElements?.Asset,\n    ...resolvers?.Asset,\n  };\n\n  const renderers: RichTextProps['renderers'] = {\n    ...defaultElements,\n    ...resolvers,\n    Asset: assetRenderers,\n  };\n\n  if (__DEV__ && !content) {\n    console.error(`[@graphcms/rich-text-react-renderer]: content is required.`);\n\n    return <Fragment />;\n  }\n\n  if (__DEV__ && !Array.isArray(content) && !content.children) {\n    console.error(\n      `[@graphcms/rich-text-react-renderer]: children is required in content.`\n    );\n\n    return <Fragment />;\n  }\n\n  /*\n    Checks if there's a embed type inside the content and if the `references` prop is defined\n\n    If it isn't defined and there's embed elements, it will show a warning\n    */\n  if (__DEV__) {\n    const elements = getArrayOfElements(content);\n\n    const embedElements = elements.filter(element => element.type === 'embed');\n\n    if (embedElements.length > 0 && !references) {\n      console.warn(\n        `[@graphcms/rich-text-react-renderer]: to render embed elements you need to provide the \\`references\\` prop`\n      );\n    }\n  }\n\n  return (\n    <RenderElements\n      content={content}\n      renderers={renderers}\n      references={references}\n    />\n  );\n}\n"],"names":["Audio","url","React","style","display","maxWidth","height","src","controls","href","Image","width","altText","title","shouldIncludeWidth","shouldIncludeHeight","loading","escapeHtml","alt","Video","FallbackForCustomAsset","Fragment","defaultElements","a","children","rest","rel","id","openInNewTab","className","props","target","video","img","iframe","position","overflow","paddingTop","top","bottom","right","left","allow","frameBorder","referrerPolicy","blockquote","ul","ol","li","p","h1","h2","h3","h4","h5","h6","table","table_head","table_body","table_row","table_cell","table_header_cell","bold","italic","underline","code","code_block","whiteSpace","wordWrap","overflowX","WebkitOverflowScrolling","fontFamily","list_item_child","Asset","audio","image","font","application","model","text","embed","link","RenderText","textNode","renderers","parsedText","shouldSerialize","includes","splitText","split","map","line","index","key","length","serialize","Bold","Italic","Underline","Code","RenderNode","node","parent","references","isText","isElement","type","RenderElement","element","nodeId","nodeType","EmptyElementsToRemove","isEmpty","elementToRender","isEmbed","referenceValues","filter","ref","_renderers$link","_renderers$embed","undefined","console","warn","_renderers$Asset","mimeType","mimeTypeGroup","_renderers$Asset2","NodeRenderer","elementTypeKeys","RenderElements","content","elements","Array","isArray","resolvers","assetRenderers"],"mappings":"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"}