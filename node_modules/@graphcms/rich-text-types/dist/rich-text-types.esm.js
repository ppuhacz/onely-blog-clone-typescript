function isElement(node) {
  return node.children !== undefined;
}

function isText(node) {
  return node.text !== undefined;
}

function isEmpty(_ref) {
  var children = _ref.children;

  // Checks if the children array has more than one element.
  // It may have a link inside, that's why we need to check this condition.
  if (children.length > 1) {
    var hasText = children.filter(function f(child) {
      if (isText(child) && child.text !== '') {
        return true;
      }

      if (isElement(child)) {
        return (child.children = child.children.filter(f)).length;
      }

      return false;
    });
    return hasText.length > 0 ? false : true;
  } else if (children[0].text === '') return true;

  return false;
}

var EmptyElementsToRemove;

(function (EmptyElementsToRemove) {
  EmptyElementsToRemove[EmptyElementsToRemove["heading-one"] = 0] = "heading-one";
  EmptyElementsToRemove[EmptyElementsToRemove["heading-two"] = 1] = "heading-two";
  EmptyElementsToRemove[EmptyElementsToRemove["heading-three"] = 2] = "heading-three";
  EmptyElementsToRemove[EmptyElementsToRemove["heading-four"] = 3] = "heading-four";
  EmptyElementsToRemove[EmptyElementsToRemove["heading-five"] = 4] = "heading-five";
  EmptyElementsToRemove[EmptyElementsToRemove["heading-six"] = 5] = "heading-six";
  EmptyElementsToRemove[EmptyElementsToRemove["table_head"] = 6] = "table_head";
})(EmptyElementsToRemove || (EmptyElementsToRemove = {}));

var elementTypeKeys = {
  'heading-one': 'h1',
  'heading-two': 'h2',
  'heading-three': 'h3',
  'heading-four': 'h4',
  'heading-five': 'h5',
  'heading-six': 'h6',
  "class": 'class',
  link: 'a',
  image: 'img',
  iframe: 'iframe',
  video: 'video',
  'bulleted-list': 'ul',
  'numbered-list': 'ol',
  'list-item': 'li',
  'list-item-child': 'list_item_child',
  table: 'table',
  table_head: 'table_head',
  table_body: 'table_body',
  table_row: 'table_row',
  table_cell: 'table_cell',
  table_header_cell: 'table_header_cell',
  'block-quote': 'blockquote',
  paragraph: 'p',
  bold: 'bold',
  italic: 'italic',
  underline: 'underline',
  code: 'code',
  'code-block': 'code_block'
};

export { EmptyElementsToRemove, elementTypeKeys, isElement, isEmpty, isText };
//# sourceMappingURL=rich-text-types.esm.js.map
