{"ast":null,"code":"import React, { Fragment } from 'react';\nimport { isText, isElement, EmptyElementsToRemove, isEmpty, elementTypeKeys } from '@graphcms/rich-text-types';\nimport escapeHtml from 'escape-html';\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction Audio(_ref) {\n  var url = _ref.url;\n  return React.createElement(\"audio\", {\n    style: {\n      display: 'block',\n      maxWidth: '100%',\n      height: 'auto'\n    },\n    src: url,\n    controls: true\n  }, React.createElement(\"p\", null, \"Your browser doesn't support HTML5 audio. Here is a\", ' ', React.createElement(\"a\", {\n    href: url\n  }, \"link to the audio\"), \" instead.\"));\n}\n\n/* eslint-disable jsx-a11y/iframe-has-title */\nfunction IFrame(_ref) {\n  var url = _ref.url;\n  return React.createElement(\"div\", {\n    style: {\n      position: 'relative',\n      overflow: 'hidden',\n      width: '100%',\n      paddingTop: '56.25%'\n    }\n  }, React.createElement(\"iframe\", {\n    style: {\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      right: 0,\n      left: 0,\n      width: '100%',\n      height: '100%'\n    },\n    src: escapeHtml(url),\n    loading: \"lazy\",\n    allow: \"fullscreen\",\n    frameBorder: \"0\",\n    referrerPolicy: \"no-referrer\"\n  }));\n}\nfunction Image(_ref) {\n  var src = _ref.src,\n    width = _ref.width,\n    height = _ref.height,\n    altText = _ref.altText,\n    title = _ref.title;\n  if (process.env.NODE_ENV !== \"production\" && !src) {\n    console.warn(\"[@graphcms/rich-text-react-renderer]: src is required. You need to include a `url` in your query\");\n  }\n  var shouldIncludeWidth = width && width > 0;\n  var shouldIncludeHeight = height && height > 0;\n  return React.createElement(\"img\", Object.assign({\n    loading: \"lazy\",\n    src: escapeHtml(src)\n  }, shouldIncludeWidth && {\n    width: width\n  }, shouldIncludeHeight && {\n    height: height\n  }, {\n    alt: altText,\n    title: title\n  }));\n}\nfunction Video(_ref) {\n  var src = _ref.src,\n    width = _ref.width,\n    height = _ref.height,\n    title = _ref.title;\n  return React.createElement(\"video\", {\n    src: escapeHtml(src),\n    controls: true,\n    width: width || '100%',\n    height: height || '100%',\n    title: title\n  }, React.createElement(\"p\", null, \"Your browser doesn't support HTML5 video. Here is a\", ' ', React.createElement(\"a\", {\n    href: src\n  }, \"link to the video\"), \" instead.\"));\n}\nfunction Class(_ref) {\n  var className = _ref.className,\n    children = _ref.children;\n  return React.createElement(\"div\", {\n    className: className\n  }, children);\n}\nfunction Link(_ref) {\n  var children = _ref.children,\n    rest = _objectWithoutPropertiesLoose(_ref, [\"children\"]);\n  var href = rest.href,\n    rel = rest.rel,\n    id = rest.id,\n    title = rest.title,\n    openInNewTab = rest.openInNewTab,\n    className = rest.className;\n  var props = {};\n  if (rel) props.rel = rel;\n  if (id) props.id = id;\n  if (title) props.title = title;\n  if (className) props.className = className;\n  if (openInNewTab) props.target = '_blank';\n  return React.createElement(\"a\", Object.assign({\n    href: escapeHtml(href)\n  }, props), children);\n}\nfunction FallbackForCustomAsset(_ref) {\n  var mimeType = _ref.mimeType;\n  if (process.env.NODE_ENV !== \"production\") {\n    console.warn(\"[@graphcms/rich-text-react-renderer]: Unsupported mimeType encountered: \" + mimeType + \". You need to write your renderer to render it since we are not opinionated about how this asset should be rendered (check our docs for more info).\");\n  }\n  return React.createElement(Fragment, null);\n}\nvar defaultElements = {\n  a: Link,\n  \"class\": Class,\n  video: Video,\n  img: Image,\n  iframe: IFrame,\n  blockquote: function blockquote(_ref2) {\n    var children = _ref2.children;\n    return React.createElement(\"blockquote\", null, children);\n  },\n  ul: function ul(_ref3) {\n    var children = _ref3.children;\n    return React.createElement(\"ul\", null, children);\n  },\n  ol: function ol(_ref4) {\n    var children = _ref4.children;\n    return React.createElement(\"ol\", null, children);\n  },\n  li: function li(_ref5) {\n    var children = _ref5.children;\n    return React.createElement(\"li\", null, children);\n  },\n  p: function p(_ref6) {\n    var children = _ref6.children;\n    return React.createElement(\"p\", null, children);\n  },\n  h1: function h1(_ref7) {\n    var children = _ref7.children;\n    return React.createElement(\"h1\", null, children);\n  },\n  h2: function h2(_ref8) {\n    var children = _ref8.children;\n    return React.createElement(\"h2\", null, children);\n  },\n  h3: function h3(_ref9) {\n    var children = _ref9.children;\n    return React.createElement(\"h3\", null, children);\n  },\n  h4: function h4(_ref10) {\n    var children = _ref10.children;\n    return React.createElement(\"h4\", null, children);\n  },\n  h5: function h5(_ref11) {\n    var children = _ref11.children;\n    return React.createElement(\"h5\", null, children);\n  },\n  h6: function h6(_ref12) {\n    var children = _ref12.children;\n    return React.createElement(\"h6\", null, children);\n  },\n  table: function table(_ref13) {\n    var children = _ref13.children;\n    return React.createElement(\"table\", null, children);\n  },\n  table_head: function table_head(_ref14) {\n    var children = _ref14.children;\n    return React.createElement(\"thead\", null, children);\n  },\n  table_body: function table_body(_ref15) {\n    var children = _ref15.children;\n    return React.createElement(\"tbody\", null, children);\n  },\n  table_row: function table_row(_ref16) {\n    var children = _ref16.children;\n    return React.createElement(\"tr\", null, children);\n  },\n  table_cell: function table_cell(_ref17) {\n    var children = _ref17.children;\n    return React.createElement(\"td\", null, children);\n  },\n  table_header_cell: function table_header_cell(_ref18) {\n    var children = _ref18.children;\n    return React.createElement(\"th\", null, children);\n  },\n  bold: function bold(_ref19) {\n    var children = _ref19.children;\n    return React.createElement(\"b\", null, children);\n  },\n  italic: function italic(_ref20) {\n    var children = _ref20.children;\n    return React.createElement(\"i\", null, children);\n  },\n  underline: function underline(_ref21) {\n    var children = _ref21.children;\n    return React.createElement(\"u\", null, children);\n  },\n  code: function code(_ref22) {\n    var children = _ref22.children;\n    return React.createElement(\"code\", null, children);\n  },\n  code_block: function code_block(_ref23) {\n    var children = _ref23.children;\n    return React.createElement(\"pre\", {\n      style: {\n        whiteSpace: 'pre',\n        wordWrap: 'break-word',\n        overflowX: 'auto',\n        WebkitOverflowScrolling: 'touch',\n        fontFamily: 'monospace'\n      }\n    }, children);\n  },\n  list_item_child: function list_item_child(_ref24) {\n    var children = _ref24.children;\n    return React.createElement(React.Fragment, null, children);\n  },\n  Asset: {\n    audio: function audio(props) {\n      return React.createElement(Audio, Object.assign({}, props, {\n        url: props.url\n      }));\n    },\n    image: function image(props) {\n      return React.createElement(Image, Object.assign({}, props, {\n        src: props.url\n      }));\n    },\n    video: function video(props) {\n      return React.createElement(Video, Object.assign({}, props, {\n        src: props.url\n      }));\n    },\n    font: FallbackForCustomAsset,\n    application: FallbackForCustomAsset,\n    model: FallbackForCustomAsset,\n    text: FallbackForCustomAsset\n  },\n  embed: {},\n  link: {}\n};\nfunction serialize(text) {\n  if (text.includes('\\n')) {\n    var splitText = text.split('\\n');\n    return splitText.map(function (line, index) {\n      return React.createElement(React.Fragment, {\n        key: index\n      }, line, index === splitText.length - 1 ? null : React.createElement(\"br\", null));\n    });\n  }\n  return text;\n}\nfunction RenderText(_ref) {\n  var textNode = _ref.textNode,\n    renderers = _ref.renderers,\n    shouldSerialize = _ref.shouldSerialize;\n  var text = textNode.text,\n    bold = textNode.bold,\n    italic = textNode.italic,\n    underline = textNode.underline,\n    code = textNode.code;\n  var parsedText = shouldSerialize ? serialize(text) : text;\n  var Bold = renderers == null ? void 0 : renderers['bold'];\n  var Italic = renderers == null ? void 0 : renderers['italic'];\n  var Underline = renderers == null ? void 0 : renderers['underline'];\n  var Code = renderers == null ? void 0 : renderers['code'];\n  if (bold && Bold) {\n    parsedText = React.createElement(Bold, null, parsedText);\n  }\n  if (italic && Italic) {\n    parsedText = React.createElement(Italic, null, parsedText);\n  }\n  if (underline && Underline) {\n    parsedText = React.createElement(Underline, null, parsedText);\n  }\n  if (code && Code) {\n    parsedText = React.createElement(Code, null, parsedText);\n  }\n  return React.createElement(React.Fragment, null, parsedText);\n}\nfunction getArrayOfElements(content) {\n  return Array.isArray(content) ? content : content.children;\n}\nfunction RenderNode(_ref) {\n  var node = _ref.node,\n    parent = _ref.parent,\n    renderers = _ref.renderers,\n    references = _ref.references;\n  if (isText(node)) {\n    var text = node.text;\n    var shouldSerialize = parent && isElement(parent) && parent.type !== 'code-block';\n    return React.createElement(RenderText, {\n      textNode: _extends({}, node, {\n        text: text\n      }),\n      renderers: renderers,\n      shouldSerialize: shouldSerialize\n    });\n  }\n  if (isElement(node)) {\n    return React.createElement(RenderElement, {\n      element: node,\n      renderers: renderers,\n      references: references\n    });\n  }\n  var type = node.type;\n  if (process.env.NODE_ENV !== \"production\") {\n    console.warn(\"[@graphcms/rich-text-react-renderer]: Unknown node type encountered: \" + type);\n  }\n  return React.createElement(Fragment, null);\n}\nfunction RenderElement(_ref2) {\n  var element = _ref2.element,\n    renderers = _ref2.renderers,\n    references = _ref2.references;\n  var children = element.children,\n    type = element.type,\n    rest = _objectWithoutPropertiesLoose(element, [\"children\", \"type\"]);\n  var nodeId = rest.nodeId,\n    nodeType = rest.nodeType; // Checks if the element is empty so that it can be removed.\n\n  if (type in EmptyElementsToRemove && isEmpty({\n    children: children\n  })) {\n    return React.createElement(Fragment, null);\n  }\n  var isEmbed = nodeId && nodeType;\n  /**\r\n   * The .filter method returns an array with all elements found.\r\n   * Since there won't be duplicated ID's, it's safe to use the first element.\r\n   */\n\n  var referenceValues = isEmbed ? references == null ? void 0 : references.filter(function (ref) {\n    return ref.id === nodeId;\n  })[0] : null;\n  /**\r\n   * `id` is used to correctly find the props for the reference.\r\n   * If it's not present, we show an error and render a Fragment.\r\n   */\n\n  if (process.env.NODE_ENV !== \"production\" && isEmbed && !(referenceValues != null && referenceValues.id)) {\n    console.error(\"[@graphcms/rich-text-react-renderer]: No id found for embed node \" + nodeId + \". In order to render custom embeds, `id` is required in your reference query.\");\n    return React.createElement(Fragment, null);\n  }\n  /**\r\n   * `mimeType` is used to determine if the node is an image or a video.\r\n   * That's why this is required and we show an error if it's not present.\r\n   * Only for custom assets embeds.\r\n   */\n\n  if (process.env.NODE_ENV !== \"production\" && isEmbed && nodeType === 'Asset' && !(referenceValues != null && referenceValues.mimeType)) {\n    console.error(\"[@graphcms/rich-text-react-renderer]: No mimeType found for embed node \" + nodeId + \". In order to render custom assets, `mimeType` is required in your reference query.\");\n    return React.createElement(Fragment, null);\n  }\n  /**\r\n   * `url` is needed to correctly render the image, video, audio or any other asset\r\n   * Only for custom assets embeds.\r\n   */\n\n  if (process.env.NODE_ENV !== \"production\" && isEmbed && nodeType === 'Asset' && !(referenceValues != null && referenceValues.url)) {\n    console.error(\"[@graphcms/rich-text-react-renderer]: No url found for embed node \" + nodeId + \". In order to render custom assets, `url` is required in your reference query.\");\n    return React.createElement(Fragment, null);\n  }\n  /**\r\n   * There's two options if the element is an embed.\r\n   * 1. If it isn't an asset, then we simply try to use the renderer for that model.\r\n   *  1.1 If we don't find a renderer, we render a Fragment and show a warning.\r\n   * 2. If it is an asset, then:\r\n   *  2.1 If we have a custom renderer for that specific mimeType, we use it.\r\n   *  2.2 If we don't have, we use the default mimeType group renderer (application, image, video...).\r\n   */\n\n  var elementToRender; // Option 1\n\n  if (isEmbed && nodeType !== 'Asset') {\n    var _renderers$link, _renderers$embed;\n    var _element = type === 'link' ? renderers == null ? void 0 : (_renderers$link = renderers.link) == null ? void 0 : _renderers$link[nodeType] : renderers == null ? void 0 : (_renderers$embed = renderers.embed) == null ? void 0 : _renderers$embed[nodeType];\n    if (_element !== undefined) {\n      elementToRender = _element;\n    } else {\n      // Option 1.1\n      console.warn(\"[@graphcms/rich-text-react-renderer]: No renderer found for custom \" + type + \" nodeType \" + nodeType + \".\");\n      return React.createElement(Fragment, null);\n    }\n  } // Option 2\n\n  if (isEmbed && nodeType === 'Asset') {\n    var _renderers$Asset;\n    var _element2 = renderers == null ? void 0 : (_renderers$Asset = renderers.Asset) == null ? void 0 : _renderers$Asset[referenceValues == null ? void 0 : referenceValues.mimeType]; // Option 2.1\n\n    if (_element2 !== undefined) {\n      elementToRender = _element2;\n    } else {\n      var _renderers$Asset2;\n\n      // Option 2.2\n      var mimeTypeGroup = referenceValues == null ? void 0 : referenceValues.mimeType.split('/')[0];\n      elementToRender = renderers == null ? void 0 : (_renderers$Asset2 = renderers.Asset) == null ? void 0 : _renderers$Asset2[mimeTypeGroup];\n    }\n  }\n  var elementNodeRenderer = isEmbed ? elementToRender : renderers == null ? void 0 : renderers[elementTypeKeys[type]];\n  var NodeRenderer = elementNodeRenderer;\n  var props = _extends({}, rest, referenceValues);\n  if (NodeRenderer) {\n    return React.createElement(NodeRenderer, Object.assign({}, props), React.createElement(RenderElements, {\n      content: children,\n      renderers: renderers,\n      references: references,\n      parent: element\n    }));\n  }\n  return React.createElement(Fragment, null);\n}\nfunction RenderElements(_ref3) {\n  var content = _ref3.content,\n    references = _ref3.references,\n    renderers = _ref3.renderers,\n    parent = _ref3.parent;\n  var elements = getArrayOfElements(content);\n  return React.createElement(React.Fragment, null, elements.map(function (node, index) {\n    return React.createElement(RenderNode, {\n      node: node,\n      parent: parent || null,\n      renderers: renderers,\n      references: references,\n      key: index\n    });\n  }));\n}\nfunction RichText(_ref4) {\n  var content = _ref4.content,\n    resolvers = _ref4.renderers,\n    references = _ref4.references;\n\n  // Shallow merge doensn't work here because if we spread over the elements, the\n  // Asset object will be completly overriden by the resolvers. We need to keep\n  // the default elements for the Asset that hasn't been writen.\n  var assetRenderers = _extends({}, defaultElements == null ? void 0 : defaultElements.Asset, resolvers == null ? void 0 : resolvers.Asset);\n  var renderers = _extends({}, defaultElements, resolvers, {\n    Asset: assetRenderers\n  });\n  if (process.env.NODE_ENV !== \"production\" && !content) {\n    console.error(\"[@graphcms/rich-text-react-renderer]: content is required.\");\n    return React.createElement(Fragment, null);\n  }\n  if (process.env.NODE_ENV !== \"production\" && !Array.isArray(content) && !content.children) {\n    console.error(\"[@graphcms/rich-text-react-renderer]: children is required in content.\");\n    return React.createElement(Fragment, null);\n  }\n  /*\r\n    Checks if there's a embed type inside the content and if the `references` prop is defined\r\n       If it isn't defined and there's embed elements, it will show a warning\r\n    */\n\n  if (process.env.NODE_ENV !== \"production\") {\n    var elements = getArrayOfElements(content);\n    var embedElements = elements.filter(function (element) {\n      return element.type === 'embed';\n    });\n    if (embedElements.length > 0 && !references) {\n      console.warn(\"[@graphcms/rich-text-react-renderer]: to render embed elements you need to provide the `references` prop\");\n    }\n  }\n  return React.createElement(RenderElements, {\n    content: content,\n    renderers: renderers,\n    references: references\n  });\n}\nexport { RichText };","map":{"version":3,"mappings":"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","names":["Audio","url","React","style","display","maxWidth","height","src","controls","href","IFrame","position","overflow","width","paddingTop","top","bottom","right","left","escapeHtml","loading","allow","frameBorder","referrerPolicy","Image","altText","title","process","console","warn","shouldIncludeWidth","shouldIncludeHeight","alt","Video","Class","className","children","Link","rest","rel","id","openInNewTab","props","target","FallbackForCustomAsset","mimeType","Fragment","defaultElements","a","video","img","iframe","blockquote","ul","ol","li","p","h1","h2","h3","h4","h5","h6","table","table_head","table_body","table_row","table_cell","table_header_cell","bold","italic","underline","code","code_block","whiteSpace","wordWrap","overflowX","WebkitOverflowScrolling","fontFamily","list_item_child","Asset","audio","image","font","application","model","text","embed","link","serialize","includes","splitText","split","map","line","index","key","length","RenderText","textNode","renderers","shouldSerialize","parsedText","Bold","Italic","Underline","Code","getArrayOfElements","content","Array","isArray","RenderNode","node","parent","references","isText","isElement","type","RenderElement","element","nodeId","nodeType","EmptyElementsToRemove","isEmpty","isEmbed","referenceValues","filter","ref","error","elementToRender","_renderers$link","_renderers$embed","undefined","_renderers$Asset","mimeTypeGroup","_renderers$Asset2","elementNodeRenderer","elementTypeKeys","NodeRenderer","RenderElements","elements","RichText","resolvers","assetRenderers","embedElements"],"sources":["C:\\Users\\Komputer 1\\Desktop\\React\\onely-blog-clone\\onely-blog-clone\\node_modules\\@graphcms\\rich-text-react-renderer\\src\\elements\\Audio.tsx","C:\\Users\\Komputer 1\\Desktop\\React\\onely-blog-clone\\onely-blog-clone\\node_modules\\@graphcms\\rich-text-react-renderer\\src\\elements\\IFrame.tsx","C:\\Users\\Komputer 1\\Desktop\\React\\onely-blog-clone\\onely-blog-clone\\node_modules\\@graphcms\\rich-text-react-renderer\\src\\elements\\Image.tsx","C:\\Users\\Komputer 1\\Desktop\\React\\onely-blog-clone\\onely-blog-clone\\node_modules\\@graphcms\\rich-text-react-renderer\\src\\elements\\Video.tsx","C:\\Users\\Komputer 1\\Desktop\\React\\onely-blog-clone\\onely-blog-clone\\node_modules\\@graphcms\\rich-text-react-renderer\\src\\elements\\Class.tsx","C:\\Users\\Komputer 1\\Desktop\\React\\onely-blog-clone\\onely-blog-clone\\node_modules\\@graphcms\\rich-text-react-renderer\\src\\elements\\Link.tsx","C:\\Users\\Komputer 1\\Desktop\\React\\onely-blog-clone\\onely-blog-clone\\node_modules\\@graphcms\\rich-text-react-renderer\\src\\defaultElements.tsx","C:\\Users\\Komputer 1\\Desktop\\React\\onely-blog-clone\\onely-blog-clone\\node_modules\\@graphcms\\rich-text-react-renderer\\src\\RenderText.tsx","C:\\Users\\Komputer 1\\Desktop\\React\\onely-blog-clone\\onely-blog-clone\\node_modules\\@graphcms\\rich-text-react-renderer\\src\\RichText.tsx"],"sourcesContent":["import React from 'react';\n\nexport type AudioProps = {\n  url: string;\n};\n\nexport function Audio({ url }: AudioProps) {\n  return (\n    <audio\n      style={{ display: 'block', maxWidth: '100%', height: 'auto' }}\n      src={url}\n      controls\n    >\n      <p>\n        Your browser doesn't support HTML5 audio. Here is a{' '}\n        <a href={url}>link to the audio</a> instead.\n      </p>\n    </audio>\n  );\n}\n","/* eslint-disable jsx-a11y/iframe-has-title */\nimport React from 'react';\nimport escapeHtml from 'escape-html';\nimport { IFrameProps } from '@graphcms/rich-text-types';\n\nexport function IFrame({ url }: Partial<IFrameProps>) {\n  return (\n    <div\n      style={{\n        position: 'relative',\n        overflow: 'hidden',\n        width: '100%',\n        paddingTop: '56.25%',\n      }}\n    >\n      <iframe\n        style={{\n          position: 'absolute',\n          top: 0,\n          bottom: 0,\n          right: 0,\n          left: 0,\n          width: '100%',\n          height: '100%',\n        }}\n        src={escapeHtml(url)}\n        loading=\"lazy\"\n        allow=\"fullscreen\"\n        frameBorder=\"0\"\n        referrerPolicy=\"no-referrer\"\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport escapeHtml from 'escape-html';\nimport { ImageProps } from '@graphcms/rich-text-types';\n\nexport function Image({\n  src,\n  width,\n  height,\n  altText,\n  title,\n}: Partial<ImageProps>) {\n  if (__DEV__ && !src) {\n    console.warn(\n      `[@graphcms/rich-text-react-renderer]: src is required. You need to include a \\`url\\` in your query`\n    );\n  }\n\n  const shouldIncludeWidth = width && width > 0;\n  const shouldIncludeHeight = height && height > 0;\n\n  return (\n    <img\n      loading=\"lazy\"\n      src={escapeHtml(src)}\n      {...(shouldIncludeWidth && { width })}\n      {...(shouldIncludeHeight && { height })}\n      alt={altText}\n      title={title}\n    />\n  );\n}\n","import React from 'react';\nimport escapeHtml from 'escape-html';\nimport { VideoProps } from '@graphcms/rich-text-types';\n\nexport function Video({ src, width, height, title }: Partial<VideoProps>) {\n  return (\n    <video\n      src={escapeHtml(src)}\n      controls\n      width={width || '100%'}\n      height={height || '100%'}\n      title={title}\n    >\n      <p>\n        Your browser doesn't support HTML5 video. Here is a{' '}\n        <a href={src}>link to the video</a> instead.\n      </p>\n    </video>\n  );\n}\n","import React from 'react';\nimport { ClassRendererProps } from '../types';\n\nexport function Class({ className, children }: ClassRendererProps) {\n  return <div className={className}>{children}</div>;\n}\n","import React from 'react';\nimport escapeHtml from 'escape-html';\nimport { LinkElement } from '@graphcms/rich-text-types';\nimport { LinkRendererProps } from '../types';\n\nexport function Link({ children, ...rest }: LinkRendererProps) {\n  const { href, rel, id, title, openInNewTab, className } = rest;\n\n  const props: Pick<LinkElement, 'rel' | 'id' | 'title' | 'className'> & {\n    target?: string;\n  } = {};\n\n  if (rel) props.rel = rel;\n  if (id) props.id = id;\n  if (title) props.title = title;\n  if (className) props.className = className;\n  if (openInNewTab) props.target = '_blank';\n\n  return (\n    <a href={escapeHtml(href)} {...props}>\n      {children}\n    </a>\n  );\n}\n","import React, { Fragment } from 'react';\nimport { RichTextProps } from './types';\n\nimport { IFrame, Image, Video, Class, Link, Audio } from './elements';\n\nfunction FallbackForCustomAsset({ mimeType }: { mimeType: string }) {\n  if (__DEV__) {\n    console.warn(\n      `[@graphcms/rich-text-react-renderer]: Unsupported mimeType encountered: ${mimeType}. You need to write your renderer to render it since we are not opinionated about how this asset should be rendered (check our docs for more info).`\n    );\n  }\n\n  return <Fragment />;\n}\n\nexport const defaultElements: Required<RichTextProps['renderers']> = {\n  a: Link,\n  class: Class,\n  video: Video,\n  img: Image,\n  iframe: IFrame,\n  blockquote: ({ children }) => <blockquote>{children}</blockquote>,\n  ul: ({ children }) => <ul>{children}</ul>,\n  ol: ({ children }) => <ol>{children}</ol>,\n  li: ({ children }) => <li>{children}</li>,\n  p: ({ children }) => <p>{children}</p>,\n  h1: ({ children }) => <h1>{children}</h1>,\n  h2: ({ children }) => <h2>{children}</h2>,\n  h3: ({ children }) => <h3>{children}</h3>,\n  h4: ({ children }) => <h4>{children}</h4>,\n  h5: ({ children }) => <h5>{children}</h5>,\n  h6: ({ children }) => <h6>{children}</h6>,\n  table: ({ children }) => <table>{children}</table>,\n  table_head: ({ children }) => <thead>{children}</thead>,\n  table_body: ({ children }) => <tbody>{children}</tbody>,\n  table_row: ({ children }) => <tr>{children}</tr>,\n  table_cell: ({ children }) => <td>{children}</td>,\n  table_header_cell: ({ children }) => <th>{children}</th>,\n  bold: ({ children }) => <b>{children}</b>,\n  italic: ({ children }) => <i>{children}</i>,\n  underline: ({ children }) => <u>{children}</u>,\n  code: ({ children }) => <code>{children}</code>,\n  code_block: ({ children }) => (\n    <pre\n      style={{\n        whiteSpace: 'pre',\n        wordWrap: 'break-word',\n        overflowX: 'auto',\n        WebkitOverflowScrolling: 'touch',\n        fontFamily: 'monospace',\n      }}\n    >\n      {children}\n    </pre>\n  ),\n  list_item_child: ({ children }) => <>{children}</>,\n  Asset: {\n    audio: props => <Audio {...props} url={props.url} />,\n    image: props => <Image {...props} src={props.url} />,\n    video: props => <Video {...props} src={props.url} />,\n    font: FallbackForCustomAsset,\n    application: FallbackForCustomAsset,\n    model: FallbackForCustomAsset,\n    text: FallbackForCustomAsset,\n  },\n  embed: {},\n  link: {},\n};\n","import React, { ReactNode } from 'react';\nimport { Text } from '@graphcms/rich-text-types';\n\nimport { RichTextProps, NodeRendererType } from './types';\n\nfunction serialize(text: string) {\n  if (text.includes('\\n')) {\n    const splitText = text.split('\\n');\n\n    return splitText.map((line, index) => (\n      <React.Fragment key={index}>\n        {line}\n        {index === splitText.length - 1 ? null : <br />}\n      </React.Fragment>\n    ));\n  }\n\n  return text;\n}\n\nexport function RenderText({\n  textNode,\n  renderers,\n  shouldSerialize,\n}: {\n  textNode: Text;\n  renderers?: RichTextProps['renderers'];\n  shouldSerialize: boolean;\n}) {\n  const { text, bold, italic, underline, code } = textNode;\n\n  let parsedText: ReactNode = shouldSerialize ? serialize(text) : text;\n\n  const Bold: NodeRendererType['bold'] = renderers?.['bold'];\n  const Italic: NodeRendererType['italic'] = renderers?.['italic'];\n  const Underline: NodeRendererType['underline'] = renderers?.['underline'];\n  const Code: NodeRendererType['code'] = renderers?.['code'];\n\n  if (bold && Bold) {\n    parsedText = <Bold>{parsedText}</Bold>;\n  }\n\n  if (italic && Italic) {\n    parsedText = <Italic>{parsedText}</Italic>;\n  }\n\n  if (underline && Underline) {\n    parsedText = <Underline>{parsedText}</Underline>;\n  }\n\n  if (code && Code) {\n    parsedText = <Code>{parsedText}</Code>;\n  }\n\n  return <>{parsedText}</>;\n}\n","import React, { Fragment } from 'react';\nimport {\n  ElementNode,\n  EmptyElementsToRemove,\n  Node,\n  isElement,\n  isText,\n  isEmpty,\n  elementTypeKeys,\n} from '@graphcms/rich-text-types';\n\nimport { defaultElements } from './defaultElements';\nimport { RenderText } from './RenderText';\nimport { RichTextProps } from './types';\n\nfunction getArrayOfElements(content: RichTextProps['content']) {\n  return Array.isArray(content) ? content : content.children;\n}\n\nfunction RenderNode({\n  node,\n  parent,\n  renderers,\n  references,\n}: {\n  node: Node;\n  parent: Node | null;\n  renderers?: RichTextProps['renderers'];\n  references?: RichTextProps['references'];\n}) {\n  if (isText(node)) {\n    let text = node.text;\n\n    const shouldSerialize =\n      parent && isElement(parent) && parent.type !== 'code-block';\n\n    return (\n      <RenderText\n        textNode={{ ...node, text }}\n        renderers={renderers}\n        shouldSerialize={shouldSerialize as boolean}\n      />\n    );\n  }\n\n  if (isElement(node)) {\n    return (\n      <RenderElement\n        element={node}\n        renderers={renderers}\n        references={references}\n      />\n    );\n  }\n\n  const { type } = node as ElementNode;\n\n  if (__DEV__) {\n    console.warn(\n      `[@graphcms/rich-text-react-renderer]: Unknown node type encountered: ${type}`\n    );\n  }\n\n  return <Fragment />;\n}\n\nfunction RenderElement({\n  element,\n  renderers,\n  references,\n}: {\n  element: ElementNode;\n  renderers?: RichTextProps['renderers'];\n  references?: RichTextProps['references'];\n}) {\n  const { children, type, ...rest } = element;\n  const { nodeId, nodeType } = rest;\n\n  // Checks if the element is empty so that it can be removed.\n  if (type in EmptyElementsToRemove && isEmpty({ children })) {\n    return <Fragment />;\n  }\n\n  const isEmbed = nodeId && nodeType;\n\n  /**\n   * The .filter method returns an array with all elements found.\n   * Since there won't be duplicated ID's, it's safe to use the first element.\n   */\n  const referenceValues = isEmbed\n    ? references?.filter(ref => ref.id === nodeId)[0]\n    : null;\n\n  /**\n   * `id` is used to correctly find the props for the reference.\n   * If it's not present, we show an error and render a Fragment.\n   */\n  if (__DEV__ && isEmbed && !referenceValues?.id) {\n    console.error(\n      `[@graphcms/rich-text-react-renderer]: No id found for embed node ${nodeId}. In order to render custom embeds, \\`id\\` is required in your reference query.`\n    );\n\n    return <Fragment />;\n  }\n\n  /**\n   * `mimeType` is used to determine if the node is an image or a video.\n   * That's why this is required and we show an error if it's not present.\n   * Only for custom assets embeds.\n   */\n  if (\n    __DEV__ &&\n    isEmbed &&\n    nodeType === 'Asset' &&\n    !referenceValues?.mimeType\n  ) {\n    console.error(\n      `[@graphcms/rich-text-react-renderer]: No mimeType found for embed node ${nodeId}. In order to render custom assets, \\`mimeType\\` is required in your reference query.`\n    );\n\n    return <Fragment />;\n  }\n\n  /**\n   * `url` is needed to correctly render the image, video, audio or any other asset\n   * Only for custom assets embeds.\n   */\n  if (__DEV__ && isEmbed && nodeType === 'Asset' && !referenceValues?.url) {\n    console.error(\n      `[@graphcms/rich-text-react-renderer]: No url found for embed node ${nodeId}. In order to render custom assets, \\`url\\` is required in your reference query.`\n    );\n\n    return <Fragment />;\n  }\n\n  /**\n   * There's two options if the element is an embed.\n   * 1. If it isn't an asset, then we simply try to use the renderer for that model.\n   *  1.1 If we don't find a renderer, we render a Fragment and show a warning.\n   * 2. If it is an asset, then:\n   *  2.1 If we have a custom renderer for that specific mimeType, we use it.\n   *  2.2 If we don't have, we use the default mimeType group renderer (application, image, video...).\n   */\n  let elementToRender;\n\n  // Option 1\n  if (isEmbed && nodeType !== 'Asset') {\n    const element =\n      type === 'link'\n        ? renderers?.link?.[nodeType as string]\n        : renderers?.embed?.[nodeType as string];\n\n    if (element !== undefined) {\n      elementToRender = element;\n    } else {\n      // Option 1.1\n      console.warn(\n        `[@graphcms/rich-text-react-renderer]: No renderer found for custom ${type} nodeType ${nodeType}.`\n      );\n      return <Fragment />;\n    }\n  }\n\n  // Option 2\n  if (isEmbed && nodeType === 'Asset') {\n    const element = renderers?.Asset?.[referenceValues?.mimeType];\n\n    // Option 2.1\n    if (element !== undefined) {\n      elementToRender = element;\n    } else {\n      // Option 2.2\n      const mimeTypeGroup = referenceValues?.mimeType.split('/')[0];\n      elementToRender = renderers?.Asset?.[mimeTypeGroup];\n    }\n  }\n\n  const elementNodeRenderer = isEmbed\n    ? elementToRender\n    : renderers?.[elementTypeKeys[type] as keyof RichTextProps['renderers']];\n\n  const NodeRenderer = elementNodeRenderer as React.ElementType;\n\n  const props = { ...rest, ...referenceValues };\n\n  if (NodeRenderer) {\n    return (\n      <NodeRenderer {...props}>\n        <RenderElements\n          content={children as ElementNode[]}\n          renderers={renderers}\n          references={references}\n          parent={element}\n        />\n      </NodeRenderer>\n    );\n  }\n\n  return <Fragment />;\n}\n\ntype RenderElementsProps = RichTextProps & {\n  parent?: Node | null;\n};\n\nfunction RenderElements({\n  content,\n  references,\n  renderers,\n  parent,\n}: RenderElementsProps) {\n  const elements = getArrayOfElements(content);\n\n  return (\n    <>\n      {elements.map((node, index) => {\n        return (\n          <RenderNode\n            node={node}\n            parent={parent || null}\n            renderers={renderers}\n            references={references}\n            key={index}\n          />\n        );\n      })}\n    </>\n  );\n}\n\nexport function RichText({\n  content,\n  renderers: resolvers,\n  references,\n}: RichTextProps) {\n  // Shallow merge doensn't work here because if we spread over the elements, the\n  // Asset object will be completly overriden by the resolvers. We need to keep\n  // the default elements for the Asset that hasn't been writen.\n  const assetRenderers = {\n    ...defaultElements?.Asset,\n    ...resolvers?.Asset,\n  };\n\n  const renderers: RichTextProps['renderers'] = {\n    ...defaultElements,\n    ...resolvers,\n    Asset: assetRenderers,\n  };\n\n  if (__DEV__ && !content) {\n    console.error(`[@graphcms/rich-text-react-renderer]: content is required.`);\n\n    return <Fragment />;\n  }\n\n  if (__DEV__ && !Array.isArray(content) && !content.children) {\n    console.error(\n      `[@graphcms/rich-text-react-renderer]: children is required in content.`\n    );\n\n    return <Fragment />;\n  }\n\n  /*\n    Checks if there's a embed type inside the content and if the `references` prop is defined\n\n    If it isn't defined and there's embed elements, it will show a warning\n    */\n  if (__DEV__) {\n    const elements = getArrayOfElements(content);\n\n    const embedElements = elements.filter(element => element.type === 'embed');\n\n    if (embedElements.length > 0 && !references) {\n      console.warn(\n        `[@graphcms/rich-text-react-renderer]: to render embed elements you need to provide the \\`references\\` prop`\n      );\n    }\n  }\n\n  return (\n    <RenderElements\n      content={content}\n      renderers={renderers}\n      references={references}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}