{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.resolveRequestDocument = exports.GraphQLWebSocketClient = exports.gql = exports.batchRequests = exports.request = exports.rawRequest = exports.GraphQLClient = exports.ClientError = void 0;\nvar cross_fetch_1 = __importStar(require(\"cross-fetch\")),\n  CrossFetch = cross_fetch_1;\nvar createRequestBody_1 = __importDefault(require(\"./createRequestBody\"));\nvar defaultJsonSerializer_1 = require(\"./defaultJsonSerializer\");\nvar parseArgs_1 = require(\"./parseArgs\");\nvar types_1 = require(\"./types\");\nObject.defineProperty(exports, \"ClientError\", {\n  enumerable: true,\n  get: function () {\n    return types_1.ClientError;\n  }\n});\nvar resolveRequestDocument_1 = require(\"./resolveRequestDocument\");\n/**\n * Convert the given headers configuration into a plain object.\n */\nvar resolveHeaders = function (headers) {\n  var oHeaders = {};\n  if (headers) {\n    if (typeof Headers !== 'undefined' && headers instanceof Headers || CrossFetch && CrossFetch.Headers && headers instanceof CrossFetch.Headers) {\n      oHeaders = HeadersInstanceToPlainObject(headers);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function (_a) {\n        var name = _a[0],\n          value = _a[1];\n        oHeaders[name] = value;\n      });\n    } else {\n      oHeaders = headers;\n    }\n  }\n  return oHeaders;\n};\n/**\n * Clean a GraphQL document to send it via a GET query\n *\n * @param {string} str GraphQL query\n * @returns {string} Cleaned query\n */\nvar queryCleanner = function (str) {\n  return str.replace(/([\\s,]|#[^\\n\\r]+)+/g, ' ').trim();\n};\n/**\n * Create query string for GraphQL request\n *\n * @param {object} param0 -\n *\n * @param {string|string[]} param0.query the GraphQL document or array of document if it's a batch request\n * @param {string|undefined} param0.operationName the GraphQL operation name\n * @param {any|any[]} param0.variables the GraphQL variables to use\n */\nvar buildGetQueryParams = function (_a) {\n  var query = _a.query,\n    variables = _a.variables,\n    operationName = _a.operationName,\n    jsonSerializer = _a.jsonSerializer;\n  if (!Array.isArray(query)) {\n    var search = [\"query=\".concat(encodeURIComponent(queryCleanner(query)))];\n    if (variables) {\n      search.push(\"variables=\".concat(encodeURIComponent(jsonSerializer.stringify(variables))));\n    }\n    if (operationName) {\n      search.push(\"operationName=\".concat(encodeURIComponent(operationName)));\n    }\n    return search.join('&');\n  }\n  if (typeof variables !== 'undefined' && !Array.isArray(variables)) {\n    throw new Error('Cannot create query with given variable type, array expected');\n  }\n  // Batch support\n  var payload = query.reduce(function (accu, currentQuery, index) {\n    accu.push({\n      query: queryCleanner(currentQuery),\n      variables: variables ? jsonSerializer.stringify(variables[index]) : undefined\n    });\n    return accu;\n  }, []);\n  return \"query=\".concat(encodeURIComponent(jsonSerializer.stringify(payload)));\n};\n/**\n * Fetch data using POST method\n */\nvar post = function (_a) {\n  var url = _a.url,\n    query = _a.query,\n    variables = _a.variables,\n    operationName = _a.operationName,\n    headers = _a.headers,\n    fetch = _a.fetch,\n    fetchOptions = _a.fetchOptions,\n    middleware = _a.middleware;\n  return __awaiter(void 0, void 0, void 0, function () {\n    var body, init;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          body = (0, createRequestBody_1.default)(query, variables, operationName, fetchOptions.jsonSerializer);\n          init = __assign({\n            method: 'POST',\n            headers: __assign(__assign({}, typeof body === 'string' ? {\n              'Content-Type': 'application/json'\n            } : {}), headers),\n            body: body\n          }, fetchOptions);\n          if (!middleware) return [3 /*break*/, 2];\n          ;\n          return [4 /*yield*/, Promise.resolve(middleware(__assign(__assign({}, init), {\n            url: url,\n            operationName: operationName,\n            variables: variables\n          })))];\n        case 1:\n          _b = _c.sent(), url = _b.url, init = __rest(_b, [\"url\"]);\n          _c.label = 2;\n        case 2:\n          return [4 /*yield*/, fetch(url, init)];\n        case 3:\n          return [2 /*return*/, _c.sent()];\n      }\n    });\n  });\n};\n/**\n * Fetch data using GET method\n */\nvar get = function (_a) {\n  var url = _a.url,\n    query = _a.query,\n    variables = _a.variables,\n    operationName = _a.operationName,\n    headers = _a.headers,\n    fetch = _a.fetch,\n    fetchOptions = _a.fetchOptions,\n    middleware = _a.middleware;\n  return __awaiter(void 0, void 0, void 0, function () {\n    var queryParams, init;\n    var _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          queryParams = buildGetQueryParams({\n            query: query,\n            variables: variables,\n            operationName: operationName,\n            jsonSerializer: fetchOptions.jsonSerializer\n          });\n          init = __assign({\n            method: 'GET',\n            headers: headers\n          }, fetchOptions);\n          if (!middleware) return [3 /*break*/, 2];\n          ;\n          return [4 /*yield*/, Promise.resolve(middleware(__assign(__assign({}, init), {\n            url: url,\n            operationName: operationName,\n            variables: variables\n          })))];\n        case 1:\n          _b = _c.sent(), url = _b.url, init = __rest(_b, [\"url\"]);\n          _c.label = 2;\n        case 2:\n          return [4 /*yield*/, fetch(\"\".concat(url, \"?\").concat(queryParams), init)];\n        case 3:\n          return [2 /*return*/, _c.sent()];\n      }\n    });\n  });\n};\n/**\n * GraphQL Client.\n */\nvar GraphQLClient = /** @class */function () {\n  function GraphQLClient(url, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    this.url = url;\n    this.options = options;\n  }\n  GraphQLClient.prototype.rawRequest = function (queryOrOptions, variables, requestHeaders) {\n    return __awaiter(this, void 0, void 0, function () {\n      var rawRequestOptions, _a, headers, _b, fetch, _c, method, requestMiddleware, responseMiddleware, fetchOptions, url, operationName;\n      return __generator(this, function (_d) {\n        rawRequestOptions = (0, parseArgs_1.parseRawRequestArgs)(queryOrOptions, variables, requestHeaders);\n        _a = this.options, headers = _a.headers, _b = _a.fetch, fetch = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? 'POST' : _c, requestMiddleware = _a.requestMiddleware, responseMiddleware = _a.responseMiddleware, fetchOptions = __rest(_a, [\"headers\", \"fetch\", \"method\", \"requestMiddleware\", \"responseMiddleware\"]);\n        url = this.url;\n        if (rawRequestOptions.signal !== undefined) {\n          fetchOptions.signal = rawRequestOptions.signal;\n        }\n        operationName = (0, resolveRequestDocument_1.resolveRequestDocument)(rawRequestOptions.query).operationName;\n        return [2 /*return*/, makeRequest({\n          url: url,\n          query: rawRequestOptions.query,\n          variables: rawRequestOptions.variables,\n          headers: __assign(__assign({}, resolveHeaders(callOrIdentity(headers))), resolveHeaders(rawRequestOptions.requestHeaders)),\n          operationName: operationName,\n          fetch: fetch,\n          method: method,\n          fetchOptions: fetchOptions,\n          middleware: requestMiddleware\n        }).then(function (response) {\n          if (responseMiddleware) {\n            responseMiddleware(response);\n          }\n          return response;\n        }).catch(function (error) {\n          if (responseMiddleware) {\n            responseMiddleware(error);\n          }\n          throw error;\n        })];\n      });\n    });\n  };\n  GraphQLClient.prototype.request = function (documentOrOptions) {\n    var variablesAndRequestHeaders = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n      variablesAndRequestHeaders[_i - 1] = arguments[_i];\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var variables, requestHeaders, requestOptions, _a, headers, _b, fetch, _c, method, requestMiddleware, responseMiddleware, fetchOptions, url, _d, query, operationName;\n      return __generator(this, function (_e) {\n        variables = variablesAndRequestHeaders[0], requestHeaders = variablesAndRequestHeaders[1];\n        requestOptions = (0, parseArgs_1.parseRequestArgs)(documentOrOptions, variables, requestHeaders);\n        _a = this.options, headers = _a.headers, _b = _a.fetch, fetch = _b === void 0 ? cross_fetch_1.default : _b, _c = _a.method, method = _c === void 0 ? 'POST' : _c, requestMiddleware = _a.requestMiddleware, responseMiddleware = _a.responseMiddleware, fetchOptions = __rest(_a, [\"headers\", \"fetch\", \"method\", \"requestMiddleware\", \"responseMiddleware\"]);\n        url = this.url;\n        if (requestOptions.signal !== undefined) {\n          fetchOptions.signal = requestOptions.signal;\n        }\n        _d = (0, resolveRequestDocument_1.resolveRequestDocument)(requestOptions.document), query = _d.query, operationName = _d.operationName;\n        return [2 /*return*/, makeRequest({\n          url: url,\n          query: query,\n          variables: requestOptions.variables,\n          headers: __assign(__assign({}, resolveHeaders(callOrIdentity(headers))), resolveHeaders(requestOptions.requestHeaders)),\n          operationName: operationName,\n          fetch: fetch,\n          method: method,\n          fetchOptions: fetchOptions,\n          middleware: requestMiddleware\n        }).then(function (response) {\n          if (responseMiddleware) {\n            responseMiddleware(response);\n          }\n          return response.data;\n        }).catch(function (error) {\n          if (responseMiddleware) {\n            responseMiddleware(error);\n          }\n          throw error;\n        })];\n      });\n    });\n  };\n  GraphQLClient.prototype.batchRequests = function (documentsOrOptions, requestHeaders) {\n    var batchRequestOptions = (0, parseArgs_1.parseBatchRequestArgs)(documentsOrOptions, requestHeaders);\n    var _a = this.options,\n      headers = _a.headers,\n      _b = _a.fetch,\n      fetch = _b === void 0 ? cross_fetch_1.default : _b,\n      _c = _a.method,\n      method = _c === void 0 ? 'POST' : _c,\n      requestMiddleware = _a.requestMiddleware,\n      responseMiddleware = _a.responseMiddleware,\n      fetchOptions = __rest(_a, [\"headers\", \"fetch\", \"method\", \"requestMiddleware\", \"responseMiddleware\"]);\n    var url = this.url;\n    if (batchRequestOptions.signal !== undefined) {\n      fetchOptions.signal = batchRequestOptions.signal;\n    }\n    var queries = batchRequestOptions.documents.map(function (_a) {\n      var document = _a.document;\n      return (0, resolveRequestDocument_1.resolveRequestDocument)(document).query;\n    });\n    var variables = batchRequestOptions.documents.map(function (_a) {\n      var variables = _a.variables;\n      return variables;\n    });\n    return makeRequest({\n      url: url,\n      query: queries,\n      variables: variables,\n      headers: __assign(__assign({}, resolveHeaders(callOrIdentity(headers))), resolveHeaders(batchRequestOptions.requestHeaders)),\n      operationName: undefined,\n      fetch: fetch,\n      method: method,\n      fetchOptions: fetchOptions,\n      middleware: requestMiddleware\n    }).then(function (response) {\n      if (responseMiddleware) {\n        responseMiddleware(response);\n      }\n      return response.data;\n    }).catch(function (error) {\n      if (responseMiddleware) {\n        responseMiddleware(error);\n      }\n      throw error;\n    });\n  };\n  GraphQLClient.prototype.setHeaders = function (headers) {\n    this.options.headers = headers;\n    return this;\n  };\n  /**\n   * Attach a header to the client. All subsequent requests will have this header.\n   */\n  GraphQLClient.prototype.setHeader = function (key, value) {\n    var _a;\n    var headers = this.options.headers;\n    if (headers) {\n      // todo what if headers is in nested array form... ?\n      //@ts-ignore\n      headers[key] = value;\n    } else {\n      this.options.headers = (_a = {}, _a[key] = value, _a);\n    }\n    return this;\n  };\n  /**\n   * Change the client endpoint. All subsequent requests will send to this endpoint.\n   */\n  GraphQLClient.prototype.setEndpoint = function (value) {\n    this.url = value;\n    return this;\n  };\n  return GraphQLClient;\n}();\nexports.GraphQLClient = GraphQLClient;\nfunction makeRequest(_a) {\n  var url = _a.url,\n    query = _a.query,\n    variables = _a.variables,\n    headers = _a.headers,\n    operationName = _a.operationName,\n    fetch = _a.fetch,\n    _b = _a.method,\n    method = _b === void 0 ? 'POST' : _b,\n    fetchOptions = _a.fetchOptions,\n    middleware = _a.middleware;\n  return __awaiter(this, void 0, void 0, function () {\n    var fetcher, isBathchingQuery, response, result, successfullyReceivedData, successfullyPassedErrorPolicy, headers_1, status_1, errors, rest, data, errorResult;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          fetcher = method.toUpperCase() === 'POST' ? post : get;\n          isBathchingQuery = Array.isArray(query);\n          return [4 /*yield*/, fetcher({\n            url: url,\n            query: query,\n            variables: variables,\n            operationName: operationName,\n            headers: headers,\n            fetch: fetch,\n            fetchOptions: fetchOptions,\n            middleware: middleware\n          })];\n        case 1:\n          response = _c.sent();\n          return [4 /*yield*/, getResult(response, fetchOptions.jsonSerializer)];\n        case 2:\n          result = _c.sent();\n          successfullyReceivedData = isBathchingQuery && Array.isArray(result) ? !result.some(function (_a) {\n            var data = _a.data;\n            return !data;\n          }) : !!result.data;\n          successfullyPassedErrorPolicy = !result.errors || fetchOptions.errorPolicy === 'all' || fetchOptions.errorPolicy === 'ignore';\n          if (response.ok && successfullyPassedErrorPolicy && successfullyReceivedData) {\n            headers_1 = response.headers, status_1 = response.status;\n            errors = result.errors, rest = __rest(result, [\"errors\"]);\n            data = fetchOptions.errorPolicy === 'ignore' ? rest : result;\n            return [2 /*return*/, __assign(__assign({}, isBathchingQuery ? {\n              data: data\n            } : data), {\n              headers: headers_1,\n              status: status_1\n            })];\n          } else {\n            errorResult = typeof result === 'string' ? {\n              error: result\n            } : result;\n            throw new types_1.ClientError(__assign(__assign({}, errorResult), {\n              status: response.status,\n              headers: response.headers\n            }), {\n              query: query,\n              variables: variables\n            });\n          }\n          return [2 /*return*/];\n      }\n    });\n  });\n}\n\nfunction rawRequest(urlOrOptions, query) {\n  var variablesAndRequestHeaders = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    variablesAndRequestHeaders[_i - 2] = arguments[_i];\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var requestOptions, client;\n    return __generator(this, function (_a) {\n      requestOptions = parseArgs_1.parseRawRequestExtendedArgs.apply(void 0, __spreadArray([urlOrOptions, query], variablesAndRequestHeaders, false));\n      client = new GraphQLClient(requestOptions.url);\n      return [2 /*return*/, client.rawRequest(__assign({}, requestOptions))];\n    });\n  });\n}\nexports.rawRequest = rawRequest;\nfunction request(urlOrOptions, document) {\n  var variablesAndRequestHeaders = [];\n  for (var _i = 2; _i < arguments.length; _i++) {\n    variablesAndRequestHeaders[_i - 2] = arguments[_i];\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var requestOptions, client;\n    return __generator(this, function (_a) {\n      requestOptions = parseArgs_1.parseRequestExtendedArgs.apply(void 0, __spreadArray([urlOrOptions, document], variablesAndRequestHeaders, false));\n      client = new GraphQLClient(requestOptions.url);\n      return [2 /*return*/, client.request(__assign({}, requestOptions))];\n    });\n  });\n}\nexports.request = request;\nfunction batchRequests(urlOrOptions, documents, requestHeaders) {\n  return __awaiter(this, void 0, void 0, function () {\n    var requestOptions, client;\n    return __generator(this, function (_a) {\n      requestOptions = (0, parseArgs_1.parseBatchRequestsExtendedArgs)(urlOrOptions, documents, requestHeaders);\n      client = new GraphQLClient(requestOptions.url);\n      return [2 /*return*/, client.batchRequests(__assign({}, requestOptions))];\n    });\n  });\n}\nexports.batchRequests = batchRequests;\nexports.default = request;\n/**\n * todo\n */\nfunction getResult(response, jsonSerializer) {\n  if (jsonSerializer === void 0) {\n    jsonSerializer = defaultJsonSerializer_1.defaultJsonSerializer;\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var contentType, _a, _b;\n    return __generator(this, function (_c) {\n      switch (_c.label) {\n        case 0:\n          response.headers.forEach(function (value, key) {\n            if (key.toLowerCase() === 'content-type') {\n              contentType = value;\n            }\n          });\n          if (!(contentType && (contentType.toLowerCase().startsWith('application/json') || contentType.toLowerCase().startsWith('application/graphql+json') || contentType.toLowerCase().startsWith('application/graphql-response+json')))) return [3 /*break*/, 2];\n          _b = (_a = jsonSerializer).parse;\n          return [4 /*yield*/, response.text()];\n        case 1:\n          return [2 /*return*/, _b.apply(_a, [_c.sent()])];\n        case 2:\n          return [2 /*return*/, response.text()];\n      }\n    });\n  });\n}\nfunction callOrIdentity(value) {\n  return typeof value === 'function' ? value() : value;\n}\n/**\n * Convenience passthrough template tag to get the benefits of tooling for the gql template tag. This does not actually parse the input into a GraphQL DocumentNode like graphql-tag package does. It just returns the string with any variables given interpolated. Can save you a bit of performance and having to install another package.\n *\n * @example\n *\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n *\n * @remarks\n *\n * Several tools in the Node GraphQL ecosystem are hardcoded to specially treat any template tag named \"gql\". For example see this prettier issue: https://github.com/prettier/prettier/issues/4360. Using this template tag has no runtime effect beyond variable interpolation.\n */\nfunction gql(chunks) {\n  var variables = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    variables[_i - 1] = arguments[_i];\n  }\n  return chunks.reduce(function (accumulator, chunk, index) {\n    return \"\".concat(accumulator).concat(chunk).concat(index in variables ? variables[index] : '');\n  }, '');\n}\nexports.gql = gql;\n/**\n * Convert Headers instance into regular object\n */\nfunction HeadersInstanceToPlainObject(headers) {\n  var o = {};\n  headers.forEach(function (v, k) {\n    o[k] = v;\n  });\n  return o;\n}\nvar graphql_ws_1 = require(\"./graphql-ws\");\nObject.defineProperty(exports, \"GraphQLWebSocketClient\", {\n  enumerable: true,\n  get: function () {\n    return graphql_ws_1.GraphQLWebSocketClient;\n  }\n});\nvar resolveRequestDocument_2 = require(\"./resolveRequestDocument\");\nObject.defineProperty(exports, \"resolveRequestDocument\", {\n  enumerable: true,\n  get: function () {\n    return resolveRequestDocument_2.resolveRequestDocument;\n  }\n});","map":{"version":3,"mappings":"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","names":["CrossFetch","Object","enumerable","get","types_1","resolveHeaders","headers","oHeaders","Headers","HeadersInstanceToPlainObject","Array","isArray","forEach","_a","name","value","queryCleanner","str","replace","trim","buildGetQueryParams","query","variables","operationName","jsonSerializer","search","encodeURIComponent","push","stringify","join","Error","payload","reduce","accu","currentQuery","index","undefined","post","url","fetch","fetchOptions","middleware","body","init","method","Promise","resolve","_b","_c","queryParams","options","GraphQLClient","queryOrOptions","requestHeaders","rawRequestOptions","cross_fetch_1","requestMiddleware","responseMiddleware","signal","makeRequest","callOrIdentity","then","response","catch","error","documentOrOptions","_i","variablesAndRequestHeaders","requestOptions","_d","document","data","documentsOrOptions","batchRequestOptions","queries","documents","map","key","exports","fetcher","toUpperCase","isBathchingQuery","getResult","result","successfullyReceivedData","some","successfullyPassedErrorPolicy","errors","errorPolicy","ok","headers_1","status_1","rest","status","errorResult","rawRequest","urlOrOptions","parseArgs_1","client","request","batchRequests","defaultJsonSerializer_1","toLowerCase","contentType","startsWith","parse","text","gql","chunks","accumulator","chunk","o","v","k"],"sources":["C:\\Users\\Komputer 1\\Desktop\\React\\onely-blog-clone\\onely-blog-clone\\node_modules\\graphql-request\\src\\index.ts"],"sourcesContent":["import crossFetch, * as CrossFetch from 'cross-fetch'\nimport { TypedDocumentNode } from '@graphql-typed-document-node/core'\nimport createRequestBody from './createRequestBody'\nimport { defaultJsonSerializer } from './defaultJsonSerializer'\nimport {\n  parseBatchRequestArgs,\n  parseRawRequestArgs,\n  parseRequestArgs,\n  parseBatchRequestsExtendedArgs,\n  parseRawRequestExtendedArgs,\n  parseRequestExtendedArgs,\n} from './parseArgs'\nimport {\n  BatchRequestDocument,\n  BatchRequestsOptions,\n  ClientError,\n  RawRequestOptions,\n  RequestDocument,\n  RequestOptions,\n  BatchRequestsExtendedOptions,\n  RawRequestExtendedOptions,\n  RequestExtendedOptions,\n  Variables,\n  PatchedRequestInit,\n  MaybeFunction,\n  Response,\n  RemoveIndex,\n  RequestMiddleware,\n  VariablesAndRequestHeaders,\n} from './types'\nimport * as Dom from './types.dom'\nimport { resolveRequestDocument } from './resolveRequestDocument'\n\nexport {\n  BatchRequestDocument,\n  BatchRequestsOptions,\n  BatchRequestsExtendedOptions,\n  ClientError,\n  RawRequestOptions,\n  RawRequestExtendedOptions,\n  RequestDocument,\n  RequestOptions,\n  RequestExtendedOptions,\n  Variables,\n}\n\n/**\n * Convert the given headers configuration into a plain object.\n */\nconst resolveHeaders = (headers: Dom.RequestInit['headers']): Record<string, string> => {\n  let oHeaders: Record<string, string> = {}\n  if (headers) {\n    if (\n      (typeof Headers !== 'undefined' && headers instanceof Headers) ||\n      (CrossFetch && CrossFetch.Headers && headers instanceof CrossFetch.Headers)\n    ) {\n      oHeaders = HeadersInstanceToPlainObject(headers)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(([name, value]) => {\n        oHeaders[name] = value\n      })\n    } else {\n      oHeaders = headers as Record<string, string>\n    }\n  }\n\n  return oHeaders\n}\n\n/**\n * Clean a GraphQL document to send it via a GET query\n *\n * @param {string} str GraphQL query\n * @returns {string} Cleaned query\n */\nconst queryCleanner = (str: string): string => str.replace(/([\\s,]|#[^\\n\\r]+)+/g, ' ').trim()\n\ntype TBuildGetQueryParams<V> =\n  | {\n      query: string\n      variables: V | undefined\n      operationName: string | undefined\n      jsonSerializer: Dom.JsonSerializer\n    }\n  | {\n      query: string[]\n      variables: V[] | undefined\n      operationName: undefined\n      jsonSerializer: Dom.JsonSerializer\n    }\n\n/**\n * Create query string for GraphQL request\n *\n * @param {object} param0 -\n *\n * @param {string|string[]} param0.query the GraphQL document or array of document if it's a batch request\n * @param {string|undefined} param0.operationName the GraphQL operation name\n * @param {any|any[]} param0.variables the GraphQL variables to use\n */\nconst buildGetQueryParams = <V>({\n  query,\n  variables,\n  operationName,\n  jsonSerializer,\n}: TBuildGetQueryParams<V>): string => {\n  if (!Array.isArray(query)) {\n    const search: string[] = [`query=${encodeURIComponent(queryCleanner(query))}`]\n\n    if (variables) {\n      search.push(`variables=${encodeURIComponent(jsonSerializer.stringify(variables))}`)\n    }\n\n    if (operationName) {\n      search.push(`operationName=${encodeURIComponent(operationName)}`)\n    }\n\n    return search.join('&')\n  }\n\n  if (typeof variables !== 'undefined' && !Array.isArray(variables)) {\n    throw new Error('Cannot create query with given variable type, array expected')\n  }\n\n  // Batch support\n  const payload = query.reduce<{ query: string; variables: string | undefined }[]>(\n    (accu, currentQuery, index) => {\n      accu.push({\n        query: queryCleanner(currentQuery),\n        variables: variables ? jsonSerializer.stringify(variables[index]) : undefined,\n      })\n      return accu\n    },\n    []\n  )\n\n  return `query=${encodeURIComponent(jsonSerializer.stringify(payload))}`\n}\n\n/**\n * Fetch data using POST method\n */\nconst post = async <V extends Variables = Variables>({\n  url,\n  query,\n  variables,\n  operationName,\n  headers,\n  fetch,\n  fetchOptions,\n  middleware,\n}: {\n  url: string\n  query: string | string[]\n  fetch: any\n  fetchOptions: Dom.RequestInit\n  variables?: V\n  headers?: Dom.RequestInit['headers']\n  operationName?: string\n  middleware?: RequestMiddleware<V>\n}) => {\n  const body = createRequestBody(query, variables, operationName, fetchOptions.jsonSerializer)\n\n  let init: Dom.RequestInit = {\n    method: 'POST',\n    headers: {\n      ...(typeof body === 'string' ? { 'Content-Type': 'application/json' } : {}),\n      ...headers,\n    },\n    body,\n    ...fetchOptions,\n  }\n  if (middleware) {\n    ;({ url, ...init } = await Promise.resolve(middleware({ ...init, url, operationName, variables })))\n  }\n  return await fetch(url, init)\n}\n\n/**\n * Fetch data using GET method\n */\nconst get = async <V extends Variables = Variables>({\n  url,\n  query,\n  variables,\n  operationName,\n  headers,\n  fetch,\n  fetchOptions,\n  middleware,\n}: {\n  url: string\n  query: string | string[]\n  fetch: any\n  fetchOptions: Dom.RequestInit\n  variables?: V\n  headers?: Dom.RequestInit['headers']\n  operationName?: string\n  middleware?: RequestMiddleware<V>\n}) => {\n  const queryParams = buildGetQueryParams<V>({\n    query,\n    variables,\n    operationName,\n    jsonSerializer: fetchOptions.jsonSerializer,\n  } as TBuildGetQueryParams<V>)\n\n  let init: Dom.RequestInit = {\n    method: 'GET',\n    headers,\n    ...fetchOptions,\n  }\n  if (middleware) {\n    ;({ url, ...init } = await Promise.resolve(middleware({ ...init, url, operationName, variables })))\n  }\n  return await fetch(`${url}?${queryParams}`, init)\n}\n\n/**\n * GraphQL Client.\n */\nexport class GraphQLClient {\n  constructor(private url: string, private readonly options: PatchedRequestInit = {}) {}\n\n  /**\n   * Send a GraphQL query to the server.\n   */\n  async rawRequest<T = any, V extends Variables = Variables>(\n    query: string,\n    variables?: V,\n    requestHeaders?: Dom.RequestInit['headers']\n  ): Promise<Response<T>>\n  async rawRequest<T = any, V extends Variables = Variables>(\n    options: RawRequestOptions<V>\n  ): Promise<Response<T>>\n  async rawRequest<T = any, V extends Variables = Variables>(\n    queryOrOptions: string | RawRequestOptions<V>,\n    variables?: V,\n    requestHeaders?: Dom.RequestInit['headers']\n  ): Promise<Response<T>> {\n    const rawRequestOptions = parseRawRequestArgs<V>(queryOrOptions, variables, requestHeaders)\n\n    let {\n      headers,\n      fetch = crossFetch,\n      method = 'POST',\n      requestMiddleware,\n      responseMiddleware,\n      ...fetchOptions\n    } = this.options\n    let { url } = this\n    if (rawRequestOptions.signal !== undefined) {\n      fetchOptions.signal = rawRequestOptions.signal\n    }\n\n    const { operationName } = resolveRequestDocument(rawRequestOptions.query)\n\n    return makeRequest<T, V>({\n      url,\n      query: rawRequestOptions.query,\n      variables: rawRequestOptions.variables as V,\n      headers: {\n        ...resolveHeaders(callOrIdentity(headers)),\n        ...resolveHeaders(rawRequestOptions.requestHeaders),\n      },\n      operationName,\n      fetch,\n      method,\n      fetchOptions,\n      middleware: requestMiddleware,\n    })\n      .then((response) => {\n        if (responseMiddleware) {\n          responseMiddleware(response)\n        }\n        return response\n      })\n      .catch((error) => {\n        if (responseMiddleware) {\n          responseMiddleware(error)\n        }\n        throw error\n      })\n  }\n\n  /**\n   * Send a GraphQL document to the server.\n   */\n  request<T = any, V = Variables>(\n    document: RequestDocument | TypedDocumentNode<T, V>,\n    ...variablesAndRequestHeaders: V extends Record<any, never> // do we have explicitly no variables allowed?\n      ? [variables?: V, requestHeaders?: Dom.RequestInit['headers']]\n      : keyof RemoveIndex<V> extends never // do we get an empty variables object?\n      ? [variables?: V, requestHeaders?: Dom.RequestInit['headers']]\n      : [variables: V, requestHeaders?: Dom.RequestInit['headers']]\n  ): Promise<T>\n  async request<T = any, V extends Variables = Variables>(options: RequestOptions<V, T>): Promise<T>\n  async request<T = any, V extends Variables = Variables>(\n    documentOrOptions: RequestDocument | TypedDocumentNode<T, V> | RequestOptions<V>,\n    ...variablesAndRequestHeaders: V extends Record<any, never> // do we have explicitly no variables allowed?\n      ? [variables?: V, requestHeaders?: Dom.RequestInit['headers']]\n      : keyof RemoveIndex<V> extends never // do we get an empty variables object?\n      ? [variables?: V, requestHeaders?: Dom.RequestInit['headers']]\n      : [variables: V, requestHeaders?: Dom.RequestInit['headers']]\n  ): Promise<T> {\n    const [variables, requestHeaders] = variablesAndRequestHeaders\n    const requestOptions = parseRequestArgs(documentOrOptions, variables, requestHeaders)\n\n    let {\n      headers,\n      fetch = crossFetch,\n      method = 'POST',\n      requestMiddleware,\n      responseMiddleware,\n      ...fetchOptions\n    } = this.options\n    let { url } = this\n    if (requestOptions.signal !== undefined) {\n      fetchOptions.signal = requestOptions.signal\n    }\n\n    const { query, operationName } = resolveRequestDocument(requestOptions.document)\n\n    return makeRequest({\n      url,\n      query,\n      variables: requestOptions.variables,\n      headers: {\n        ...resolveHeaders(callOrIdentity(headers)),\n        ...resolveHeaders(requestOptions.requestHeaders),\n      },\n      operationName,\n      fetch,\n      method,\n      fetchOptions,\n      middleware: requestMiddleware,\n    })\n      .then((response) => {\n        if (responseMiddleware) {\n          responseMiddleware(response)\n        }\n        return response.data\n      })\n      .catch((error) => {\n        if (responseMiddleware) {\n          responseMiddleware(error)\n        }\n        throw error\n      })\n  }\n\n  /**\n   * Send GraphQL documents in batch to the server.\n   */\n  batchRequests<T extends any = any, V extends Variables = Variables>(\n    documents: BatchRequestDocument<V>[],\n    requestHeaders?: Dom.RequestInit['headers']\n  ): Promise<T>\n  batchRequests<T = any, V extends Variables = Variables>(options: BatchRequestsOptions<V>): Promise<T>\n  batchRequests<T = any, V extends Variables = Variables>(\n    documentsOrOptions: BatchRequestDocument<V>[] | BatchRequestsOptions<V>,\n    requestHeaders?: Dom.RequestInit['headers']\n  ): Promise<T> {\n    const batchRequestOptions = parseBatchRequestArgs<V>(documentsOrOptions, requestHeaders)\n\n    let {\n      headers,\n      fetch = crossFetch,\n      method = 'POST',\n      requestMiddleware,\n      responseMiddleware,\n      ...fetchOptions\n    } = this.options\n    let { url } = this\n    if (batchRequestOptions.signal !== undefined) {\n      fetchOptions.signal = batchRequestOptions.signal\n    }\n\n    const queries = batchRequestOptions.documents.map(\n      ({ document }) => resolveRequestDocument(document).query\n    )\n    const variables = batchRequestOptions.documents.map(({ variables }) => variables)\n\n    return makeRequest<T, (V | undefined)[]>({\n      url,\n      query: queries,\n      variables,\n      headers: {\n        ...resolveHeaders(callOrIdentity(headers)),\n        ...resolveHeaders(batchRequestOptions.requestHeaders),\n      },\n      operationName: undefined,\n      fetch,\n      method,\n      fetchOptions,\n      middleware: requestMiddleware,\n    })\n      .then((response) => {\n        if (responseMiddleware) {\n          responseMiddleware(response)\n        }\n        return response.data\n      })\n      .catch((error) => {\n        if (responseMiddleware) {\n          responseMiddleware(error)\n        }\n        throw error\n      })\n  }\n\n  setHeaders(headers: Dom.RequestInit['headers']): GraphQLClient {\n    this.options.headers = headers\n    return this\n  }\n\n  /**\n   * Attach a header to the client. All subsequent requests will have this header.\n   */\n  setHeader(key: string, value: string): GraphQLClient {\n    const { headers } = this.options\n\n    if (headers) {\n      // todo what if headers is in nested array form... ?\n      //@ts-ignore\n      headers[key] = value\n    } else {\n      this.options.headers = { [key]: value }\n    }\n\n    return this\n  }\n\n  /**\n   * Change the client endpoint. All subsequent requests will send to this endpoint.\n   */\n  setEndpoint(value: string): GraphQLClient {\n    this.url = value\n    return this\n  }\n}\n\nasync function makeRequest<T = any, V extends Variables = Variables>({\n  url,\n  query,\n  variables,\n  headers,\n  operationName,\n  fetch,\n  method = 'POST',\n  fetchOptions,\n  middleware,\n}: {\n  url: string\n  query: string | string[]\n  variables?: V\n  headers?: Dom.RequestInit['headers']\n  operationName?: string\n  fetch: any\n  method: string\n  fetchOptions: Dom.RequestInit\n  middleware?: RequestMiddleware<V>\n}): Promise<Response<T>> {\n  const fetcher = method.toUpperCase() === 'POST' ? post : get\n  const isBathchingQuery = Array.isArray(query)\n\n  const response = await fetcher({\n    url,\n    query,\n    variables,\n    operationName,\n    headers,\n    fetch,\n    fetchOptions,\n    middleware,\n  })\n  const result = await getResult(response, fetchOptions.jsonSerializer)\n\n  const successfullyReceivedData =\n    isBathchingQuery && Array.isArray(result) ? !result.some(({ data }) => !data) : !!result.data\n\n  const successfullyPassedErrorPolicy =\n    !result.errors || fetchOptions.errorPolicy === 'all' || fetchOptions.errorPolicy === 'ignore'\n\n  if (response.ok && successfullyPassedErrorPolicy && successfullyReceivedData) {\n    const { headers, status } = response\n\n    const { errors, ...rest } = result\n    const data = fetchOptions.errorPolicy === 'ignore' ? rest : result\n\n    return {\n      ...(isBathchingQuery ? { data } : data),\n      headers,\n      status,\n    }\n  } else {\n    const errorResult = typeof result === 'string' ? { error: result } : result\n    throw new ClientError(\n      { ...errorResult, status: response.status, headers: response.headers },\n      { query, variables }\n    )\n  }\n}\n\n/**\n * Send a GraphQL Query to the GraphQL server for execution.\n */\nexport async function rawRequest<T = any, V extends Variables = Variables>(\n  url: string,\n  query: string,\n  ...variablesAndRequestHeaders: VariablesAndRequestHeaders<V>\n): Promise<Response<T>>\nexport async function rawRequest<T = any, V extends Variables = Variables>(\n  options: RawRequestExtendedOptions<V>\n): Promise<Response<T>>\nexport async function rawRequest<T = any, V extends Variables = Variables>(\n  urlOrOptions: string | RawRequestExtendedOptions<V>,\n  query?: string,\n  ...variablesAndRequestHeaders: VariablesAndRequestHeaders<V>\n): Promise<Response<T>> {\n  const requestOptions = parseRawRequestExtendedArgs<V>(urlOrOptions, query, ...variablesAndRequestHeaders)\n  const client = new GraphQLClient(requestOptions.url)\n  return client.rawRequest<T, V>({\n    ...requestOptions,\n  })\n}\n\n/**\n * Send a GraphQL Document to the GraphQL server for execution.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await request('https://foo.bar/graphql', `\n *   {\n *     query {\n *       users\n *     }\n *   }\n * `)\n *\n * // You can also pass a GraphQL DocumentNode. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n *\n * // If you don't actually care about using DocumentNode but just\n * // want the tooling support for gql template tag like IDE syntax\n * // coloring and prettier autoformat then note you can use the\n * // passthrough gql tag shipped with graphql-request to save a bit\n * // of performance and not have to install another dep into your project.\n *\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n * ```\n */\nexport async function request<T = any, V extends Variables = Variables>(\n  url: string,\n  document: RequestDocument | TypedDocumentNode<T, V>,\n  ...variablesAndRequestHeaders: VariablesAndRequestHeaders<V>\n): Promise<T>\nexport async function request<T = any, V extends Variables = Variables>(\n  options: RequestExtendedOptions<V, T>\n): Promise<T>\nexport async function request<T = any, V extends Variables = Variables>(\n  urlOrOptions: string | RequestExtendedOptions<V, T>,\n  document?: RequestDocument | TypedDocumentNode<T, V>,\n  ...variablesAndRequestHeaders: VariablesAndRequestHeaders<V>\n): Promise<T> {\n  const requestOptions = parseRequestExtendedArgs<V>(urlOrOptions, document, ...variablesAndRequestHeaders)\n  const client = new GraphQLClient(requestOptions.url)\n  return client.request<T, V>({\n    ...requestOptions,\n  })\n}\n\n/**\n * Send a batch of GraphQL Document to the GraphQL server for exectuion.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await batchRequests('https://foo.bar/graphql', [\n * {\n *  query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * },\n * {\n *   query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * }])\n *\n * // You can also pass a GraphQL DocumentNode as query. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await batchRequests('https://foo.bar/graphql', [{ query: gql`...` }])\n * ```\n */\nexport async function batchRequests<T = any, V extends Variables = Variables>(\n  url: string,\n  documents: BatchRequestDocument<V>[],\n  requestHeaders?: Dom.RequestInit['headers']\n): Promise<T>\nexport async function batchRequests<T = any, V extends Variables = Variables>(\n  options: BatchRequestsExtendedOptions<V>\n): Promise<T>\nexport async function batchRequests<T = any, V extends Variables = Variables>(\n  urlOrOptions: string | BatchRequestsExtendedOptions<V>,\n  documents?: BatchRequestDocument<V>[],\n  requestHeaders?: Dom.RequestInit['headers']\n): Promise<T> {\n  const requestOptions = parseBatchRequestsExtendedArgs<V>(urlOrOptions, documents, requestHeaders)\n  const client = new GraphQLClient(requestOptions.url)\n  return client.batchRequests<T, V>({ ...requestOptions })\n}\n\nexport default request\n\n/**\n * todo\n */\nasync function getResult(response: Dom.Response, jsonSerializer = defaultJsonSerializer): Promise<any> {\n  let contentType: string | undefined\n\n  response.headers.forEach((value, key) => {\n    if (key.toLowerCase() === 'content-type') {\n      contentType = value\n    }\n  })\n\n  if (\n    contentType &&\n    (contentType.toLowerCase().startsWith('application/json') ||\n      contentType.toLowerCase().startsWith('application/graphql+json') ||\n      contentType.toLowerCase().startsWith('application/graphql-response+json'))\n  ) {\n    return jsonSerializer.parse(await response.text())\n  } else {\n    return response.text()\n  }\n}\n\nfunction callOrIdentity<T>(value: MaybeFunction<T>) {\n  return typeof value === 'function' ? (value as () => T)() : value\n}\n\n/**\n * Convenience passthrough template tag to get the benefits of tooling for the gql template tag. This does not actually parse the input into a GraphQL DocumentNode like graphql-tag package does. It just returns the string with any variables given interpolated. Can save you a bit of performance and having to install another package.\n *\n * @example\n *\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n *\n * @remarks\n *\n * Several tools in the Node GraphQL ecosystem are hardcoded to specially treat any template tag named \"gql\". For example see this prettier issue: https://github.com/prettier/prettier/issues/4360. Using this template tag has no runtime effect beyond variable interpolation.\n */\nexport function gql(chunks: TemplateStringsArray, ...variables: any[]): string {\n  return chunks.reduce(\n    (accumulator, chunk, index) => `${accumulator}${chunk}${index in variables ? variables[index] : ''}`,\n    ''\n  )\n}\n\n/**\n * Convert Headers instance into regular object\n */\nfunction HeadersInstanceToPlainObject(headers: Dom.Response['headers']): Record<string, string> {\n  const o: any = {}\n  headers.forEach((v, k) => {\n    o[k] = v\n  })\n  return o\n}\n\nexport { GraphQLWebSocketClient } from './graphql-ws'\nexport { resolveRequestDocument } from './resolveRequestDocument'\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}