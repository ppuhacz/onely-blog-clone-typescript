{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar extract_files_1 = require(\"extract-files\");\nvar form_data_1 = __importDefault(require(\"form-data\"));\nvar defaultJsonSerializer_1 = require(\"./defaultJsonSerializer\");\n/**\n * Duck type if NodeJS stream\n * https://github.com/sindresorhus/is-stream/blob/3750505b0727f6df54324784fe369365ef78841e/index.js#L3\n */\nvar isExtractableFileEnhanced = function (value) {\n  return (0, extract_files_1.isExtractableFile)(value) || value !== null && typeof value === 'object' && typeof value.pipe === 'function';\n};\n/**\n * Returns Multipart Form if body contains files\n * (https://github.com/jaydenseric/graphql-multipart-request-spec)\n * Otherwise returns JSON\n */\nfunction createRequestBody(query, variables, operationName, jsonSerializer) {\n  if (jsonSerializer === void 0) {\n    jsonSerializer = defaultJsonSerializer_1.defaultJsonSerializer;\n  }\n  var _a = (0, extract_files_1.extractFiles)({\n      query: query,\n      variables: variables,\n      operationName: operationName\n    }, '', isExtractableFileEnhanced),\n    clone = _a.clone,\n    files = _a.files;\n  if (files.size === 0) {\n    if (!Array.isArray(query)) {\n      return jsonSerializer.stringify(clone);\n    }\n    if (typeof variables !== 'undefined' && !Array.isArray(variables)) {\n      throw new Error('Cannot create request body with given variable type, array expected');\n    }\n    // Batch support\n    var payload = query.reduce(function (accu, currentQuery, index) {\n      accu.push({\n        query: currentQuery,\n        variables: variables ? variables[index] : undefined\n      });\n      return accu;\n    }, []);\n    return jsonSerializer.stringify(payload);\n  }\n  var Form = typeof FormData === 'undefined' ? form_data_1.default : FormData;\n  var form = new Form();\n  form.append('operations', jsonSerializer.stringify(clone));\n  var map = {};\n  var i = 0;\n  files.forEach(function (paths) {\n    map[++i] = paths;\n  });\n  form.append('map', jsonSerializer.stringify(map));\n  i = 0;\n  files.forEach(function (paths, file) {\n    form.append(\"\".concat(++i), file);\n  });\n  return form;\n}\nexports.default = createRequestBody;","map":{"version":3,"mappings":";;;;;;;;;;AAAA;AACA;AACA;AAIA;;;;AAIA,IAAMA,yBAAyB,GAAG,UAACC,KAAU;EAC3C,4CAAiB,EAACA,KAAK,CAAC,IACvBA,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,CAACC,IAAI,KAAK,UAAW;AADjF,CACiF;AAEnF;;;;;AAKA,SAAwBC,iBAAiB,CACvCC,KAAwB,EACxBC,SAAmC,EACnCC,aAAsB,EACtBC,cAAsC;EAAtC;IAAAA,iBAAiBC,6CAAqB;EAAA;EAEhC,SAAmB,gCAAY,EAAC;MAAEJ,KAAK;MAAEC,SAAS;MAAEC,aAAa;IAAA,CAAE,EAAE,EAAE,EAAEN,yBAAyB,CAAC;IAAjGS,KAAK;IAAEC,KAAK,WAAqF;EAEzG,IAAIA,KAAK,CAACC,IAAI,KAAK,CAAC,EAAE;IACpB,IAAI,CAACC,KAAK,CAACC,OAAO,CAACT,KAAK,CAAC,EAAE;MACzB,OAAOG,cAAc,CAACO,SAAS,CAACL,KAAK,CAAC;;IAGxC,IAAI,OAAOJ,SAAS,KAAK,WAAW,IAAI,CAACO,KAAK,CAACC,OAAO,CAACR,SAAS,CAAC,EAAE;MACjE,MAAM,IAAIU,KAAK,CAAC,qEAAqE,CAAC;;IAGxF;IACA,IAAMC,OAAO,GAAGZ,KAAK,CAACa,MAAM,CAC1B,UAACC,IAAI,EAAEC,YAAY,EAAEC,KAAK;MACxBF,IAAI,CAACG,IAAI,CAAC;QAAEjB,KAAK,EAAEe,YAAY;QAAEd,SAAS,EAAEA,SAAS,GAAGA,SAAS,CAACe,KAAK,CAAC,GAAGE;MAAS,CAAE,CAAC;MACvF,OAAOJ,IAAI;IACb,CAAC,EACD,EAAE,CACH;IAED,OAAOX,cAAc,CAACO,SAAS,CAACE,OAAO,CAAC;;EAG1C,IAAMO,IAAI,GAAG,OAAOC,QAAQ,KAAK,WAAW,GAAGC,mBAAY,GAAGD,QAAQ;EAEtE,IAAME,IAAI,GAAG,IAAIH,IAAI,EAAE;EAEvBG,IAAI,CAACC,MAAM,CAAC,YAAY,EAAEpB,cAAc,CAACO,SAAS,CAACL,KAAK,CAAC,CAAC;EAE1D,IAAMmB,GAAG,GAAgC,EAAE;EAC3C,IAAIC,CAAC,GAAG,CAAC;EACTnB,KAAK,CAACoB,OAAO,CAAC,UAACC,KAAK;IAClBH,GAAG,CAAC,EAAEC,CAAC,CAAC,GAAGE,KAAK;EAClB,CAAC,CAAC;EACFL,IAAI,CAACC,MAAM,CAAC,KAAK,EAAEpB,cAAc,CAACO,SAAS,CAACc,GAAG,CAAC,CAAC;EAEjDC,CAAC,GAAG,CAAC;EACLnB,KAAK,CAACoB,OAAO,CAAC,UAACC,KAAK,EAAEC,IAAI;IACxBN,IAAI,CAACC,MAAM,CAAC,UAAG,EAAEE,CAAC,CAAE,EAAEG,IAAW,CAAC;EACpC,CAAC,CAAC;EAEF,OAAON,IAAoB;AAC7B;AAhDAO","names":["isExtractableFileEnhanced","value","pipe","createRequestBody","query","variables","operationName","jsonSerializer","defaultJsonSerializer_1","clone","files","size","Array","isArray","stringify","Error","payload","reduce","accu","currentQuery","index","push","undefined","Form","FormData","form_data_1","form","append","map","i","forEach","paths","file","exports"],"sources":["C:\\Users\\Komputer 1\\Desktop\\React\\onely-blog-clone\\onely-blog-clone\\node_modules\\graphql-request\\src\\createRequestBody.ts"],"sourcesContent":["import { isExtractableFile, extractFiles, ExtractableFile } from 'extract-files'\nimport FormDataNode from 'form-data'\nimport { defaultJsonSerializer } from './defaultJsonSerializer'\nimport { Variables } from './types'\nimport * as Dom from './types.dom'\n\n/**\n * Duck type if NodeJS stream\n * https://github.com/sindresorhus/is-stream/blob/3750505b0727f6df54324784fe369365ef78841e/index.js#L3\n */\nconst isExtractableFileEnhanced = (value: any): value is ExtractableFile | { pipe: Function } =>\n  isExtractableFile(value) ||\n  (value !== null && typeof value === 'object' && typeof value.pipe === 'function')\n\n/**\n * Returns Multipart Form if body contains files\n * (https://github.com/jaydenseric/graphql-multipart-request-spec)\n * Otherwise returns JSON\n */\nexport default function createRequestBody(\n  query: string | string[],\n  variables?: Variables | Variables[],\n  operationName?: string,\n  jsonSerializer = defaultJsonSerializer\n): string | Dom.FormData {\n  const { clone, files } = extractFiles({ query, variables, operationName }, '', isExtractableFileEnhanced)\n\n  if (files.size === 0) {\n    if (!Array.isArray(query)) {\n      return jsonSerializer.stringify(clone)\n    }\n\n    if (typeof variables !== 'undefined' && !Array.isArray(variables)) {\n      throw new Error('Cannot create request body with given variable type, array expected')\n    }\n\n    // Batch support\n    const payload = query.reduce<{ query: string; variables: Variables | undefined }[]>(\n      (accu, currentQuery, index) => {\n        accu.push({ query: currentQuery, variables: variables ? variables[index] : undefined })\n        return accu\n      },\n      []\n    )\n\n    return jsonSerializer.stringify(payload)\n  }\n\n  const Form = typeof FormData === 'undefined' ? FormDataNode : FormData\n\n  const form = new Form()\n\n  form.append('operations', jsonSerializer.stringify(clone))\n\n  const map: { [key: number]: string[] } = {}\n  let i = 0\n  files.forEach((paths) => {\n    map[++i] = paths\n  })\n  form.append('map', jsonSerializer.stringify(map))\n\n  i = 0\n  files.forEach((paths, file) => {\n    form.append(`${++i}`, file as any)\n  })\n\n  return form as Dom.FormData\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}