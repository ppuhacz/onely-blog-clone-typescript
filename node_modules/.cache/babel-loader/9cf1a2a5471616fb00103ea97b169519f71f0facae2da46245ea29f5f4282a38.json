{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GraphQLWebSocketClient = void 0;\nvar types_1 = require(\"./types\");\nvar resolveRequestDocument_1 = require(\"./resolveRequestDocument\");\nvar CONNECTION_INIT = 'connection_init';\nvar CONNECTION_ACK = 'connection_ack';\nvar PING = 'ping';\nvar PONG = 'pong';\nvar SUBSCRIBE = 'subscribe';\nvar NEXT = 'next';\nvar ERROR = 'error';\nvar COMPLETE = 'complete';\nvar GraphQLWebSocketMessage = /** @class */function () {\n  function GraphQLWebSocketMessage(type, payload, id) {\n    this._type = type;\n    this._payload = payload;\n    this._id = id;\n  }\n  Object.defineProperty(GraphQLWebSocketMessage.prototype, \"type\", {\n    get: function () {\n      return this._type;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(GraphQLWebSocketMessage.prototype, \"id\", {\n    get: function () {\n      return this._id;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(GraphQLWebSocketMessage.prototype, \"payload\", {\n    get: function () {\n      return this._payload;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(GraphQLWebSocketMessage.prototype, \"text\", {\n    get: function () {\n      var result = {\n        type: this.type\n      };\n      if (this.id != null && this.id != undefined) result.id = this.id;\n      if (this.payload != null && this.payload != undefined) result.payload = this.payload;\n      return JSON.stringify(result);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  GraphQLWebSocketMessage.parse = function (data, f) {\n    var _a = JSON.parse(data),\n      type = _a.type,\n      payload = _a.payload,\n      id = _a.id;\n    return new GraphQLWebSocketMessage(type, f(payload), id);\n  };\n  return GraphQLWebSocketMessage;\n}();\nvar GraphQLWebSocketClient = /** @class */function () {\n  function GraphQLWebSocketClient(socket, _a) {\n    var onInit = _a.onInit,\n      onAcknowledged = _a.onAcknowledged,\n      onPing = _a.onPing,\n      onPong = _a.onPong;\n    var _this = this;\n    this.socketState = {\n      acknowledged: false,\n      lastRequestId: 0,\n      subscriptions: {}\n    };\n    this.socket = socket;\n    socket.onopen = function (e) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a, _b, _c, _d;\n        return __generator(this, function (_e) {\n          switch (_e.label) {\n            case 0:\n              this.socketState.acknowledged = false;\n              this.socketState.subscriptions = {};\n              _b = (_a = socket).send;\n              _c = ConnectionInit;\n              if (!onInit) return [3 /*break*/, 2];\n              return [4 /*yield*/, onInit()];\n            case 1:\n              _d = _e.sent();\n              return [3 /*break*/, 3];\n            case 2:\n              _d = null;\n              _e.label = 3;\n            case 3:\n              _b.apply(_a, [_c.apply(void 0, [_d]).text]);\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n\n    socket.onclose = function (e) {\n      _this.socketState.acknowledged = false;\n      _this.socketState.subscriptions = {};\n    };\n    socket.onerror = function (e) {\n      console.error(e);\n    };\n    socket.onmessage = function (e) {\n      try {\n        var message = parseMessage(e.data);\n        switch (message.type) {\n          case CONNECTION_ACK:\n            {\n              if (_this.socketState.acknowledged) {\n                console.warn('Duplicate CONNECTION_ACK message ignored');\n              } else {\n                _this.socketState.acknowledged = true;\n                if (onAcknowledged) onAcknowledged(message.payload);\n              }\n              return;\n            }\n          case PING:\n            {\n              if (onPing) onPing(message.payload).then(function (r) {\n                return socket.send(Pong(r).text);\n              });else socket.send(Pong(null).text);\n              return;\n            }\n          case PONG:\n            {\n              if (onPong) onPong(message.payload);\n              return;\n            }\n        }\n        if (!_this.socketState.acknowledged) {\n          // Web-socket connection not acknowledged\n          return;\n        }\n        if (message.id === undefined || message.id === null || !_this.socketState.subscriptions[message.id]) {\n          // No subscription identifer or subscription indentifier is not found\n          return;\n        }\n        var _a = _this.socketState.subscriptions[message.id],\n          query = _a.query,\n          variables = _a.variables,\n          subscriber = _a.subscriber;\n        switch (message.type) {\n          case NEXT:\n            {\n              if (!message.payload.errors && message.payload.data) {\n                subscriber.next && subscriber.next(message.payload.data);\n              }\n              if (message.payload.errors) {\n                subscriber.error && subscriber.error(new types_1.ClientError(__assign(__assign({}, message.payload), {\n                  status: 200\n                }), {\n                  query: query,\n                  variables: variables\n                }));\n              } else {}\n              return;\n            }\n          case ERROR:\n            {\n              subscriber.error && subscriber.error(new types_1.ClientError({\n                errors: message.payload,\n                status: 200\n              }, {\n                query: query,\n                variables: variables\n              }));\n              return;\n            }\n          case COMPLETE:\n            {\n              subscriber.complete && subscriber.complete();\n              delete _this.socketState.subscriptions[message.id];\n              return;\n            }\n        }\n      } catch (e) {\n        // Unexpected errors while handling graphql-ws message\n        console.error(e);\n        socket.close(1006);\n      }\n      socket.close(4400, 'Unknown graphql-ws message.');\n    };\n  }\n  GraphQLWebSocketClient.prototype.makeSubscribe = function (query, operationName, subscriber, variables) {\n    var _this = this;\n    var subscriptionId = (this.socketState.lastRequestId++).toString();\n    this.socketState.subscriptions[subscriptionId] = {\n      query: query,\n      variables: variables,\n      subscriber: subscriber\n    };\n    this.socket.send(Subscribe(subscriptionId, {\n      query: query,\n      operationName: operationName,\n      variables: variables\n    }).text);\n    return function () {\n      _this.socket.send(Complete(subscriptionId).text);\n      delete _this.socketState.subscriptions[subscriptionId];\n    };\n  };\n  GraphQLWebSocketClient.prototype.rawRequest = function (query, variables) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var result;\n      _this.rawSubscribe(query, {\n        next: function (data, extensions) {\n          return result = {\n            data: data,\n            extensions: extensions\n          };\n        },\n        error: reject,\n        complete: function () {\n          return resolve(result);\n        }\n      }, variables);\n    });\n  };\n  GraphQLWebSocketClient.prototype.request = function (document, variables) {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var result;\n      _this.subscribe(document, {\n        next: function (data) {\n          return result = data;\n        },\n        error: reject,\n        complete: function () {\n          return resolve(result);\n        }\n      }, variables);\n    });\n  };\n  GraphQLWebSocketClient.prototype.subscribe = function (document, subscriber, variables) {\n    var _a = (0, resolveRequestDocument_1.resolveRequestDocument)(document),\n      query = _a.query,\n      operationName = _a.operationName;\n    return this.makeSubscribe(query, operationName, subscriber, variables);\n  };\n  GraphQLWebSocketClient.prototype.rawSubscribe = function (query, subscriber, variables) {\n    return this.makeSubscribe(query, undefined, subscriber, variables);\n  };\n  GraphQLWebSocketClient.prototype.ping = function (payload) {\n    this.socket.send(Ping(payload).text);\n  };\n  GraphQLWebSocketClient.prototype.close = function () {\n    this.socket.close(1000);\n  };\n  GraphQLWebSocketClient.PROTOCOL = 'graphql-transport-ws';\n  return GraphQLWebSocketClient;\n}();\nexports.GraphQLWebSocketClient = GraphQLWebSocketClient;\n// Helper functions\nfunction parseMessage(data, f) {\n  if (f === void 0) {\n    f = function (a) {\n      return a;\n    };\n  }\n  var m = GraphQLWebSocketMessage.parse(data, f);\n  return m;\n}\nfunction ConnectionInit(payload) {\n  return new GraphQLWebSocketMessage(CONNECTION_INIT, payload);\n}\nfunction Ping(payload) {\n  return new GraphQLWebSocketMessage(PING, payload, undefined);\n}\nfunction Pong(payload) {\n  return new GraphQLWebSocketMessage(PONG, payload, undefined);\n}\nfunction Subscribe(id, payload) {\n  return new GraphQLWebSocketMessage(SUBSCRIBE, payload, id);\n}\nfunction Complete(id) {\n  return new GraphQLWebSocketMessage(COMPLETE, undefined, id);\n}","map":{"version":3,"mappings":"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","names":["CONNECTION_INIT","CONNECTION_ACK","PING","PONG","SUBSCRIBE","NEXT","ERROR","COMPLETE","type","payload","id","_type","_payload","_id","Object","GraphQLWebSocketMessage","result","undefined","JSON","stringify","data","f","parse","socket","_a","onInit","onAcknowledged","onPing","onPong","acknowledged","lastRequestId","subscriptions","onopen","e","socketState","_b","send","_c","_d","text","onclose","_this","onerror","console","error","onmessage","message","parseMessage","warn","then","r","Pong","query","variables","subscriber","errors","next","types_1","status","complete","close","GraphQLWebSocketClient","operationName","subscriptionId","toString","Subscribe","Complete","Promise","resolve","reject","rawSubscribe","extensions","document","subscribe","makeSubscribe","Ping","exports","a","m","ConnectionInit"],"sources":["C:\\Users\\Komputer 1\\Desktop\\React\\onely-blog-clone\\onely-blog-clone\\node_modules\\graphql-request\\src\\graphql-ws.ts"],"sourcesContent":["import { ClientError, RequestDocument, Variables } from './types'\nimport * as Dom from './types.dom'\nimport { resolveRequestDocument } from './resolveRequestDocument'\n\nconst CONNECTION_INIT = 'connection_init'\nconst CONNECTION_ACK = 'connection_ack'\nconst PING = 'ping'\nconst PONG = 'pong'\nconst SUBSCRIBE = 'subscribe'\nconst NEXT = 'next'\nconst ERROR = 'error'\nconst COMPLETE = 'complete'\n\ntype MessagePayload = { [key: string]: any }\n\ntype SubscribePayload<V extends Variables = Variables, E = any> = {\n  operationName?: string | null\n  query: string\n  variables?: V\n  extensions?: E\n}\n\nclass GraphQLWebSocketMessage<A = MessagePayload> {\n  private _type: string\n  private _id?: string\n  private _payload?: A\n\n  public get type(): string {\n    return this._type\n  }\n  public get id(): string | undefined {\n    return this._id\n  }\n  public get payload(): A | undefined {\n    return this._payload\n  }\n\n  constructor(type: string, payload?: A, id?: string) {\n    this._type = type\n    this._payload = payload\n    this._id = id\n  }\n\n  public get text(): string {\n    const result: any = { type: this.type }\n    if (this.id != null && this.id != undefined) result.id = this.id\n    if (this.payload != null && this.payload != undefined) result.payload = this.payload\n    return JSON.stringify(result)\n  }\n\n  static parse<A>(data: string, f: (payload: any) => A): GraphQLWebSocketMessage<A> {\n    const { type, payload, id }: { type: string; payload: any; id: string } = JSON.parse(data)\n    return new GraphQLWebSocketMessage(type, f(payload), id)\n  }\n}\n\nexport type SocketHandler = {\n  onInit?: <T>() => Promise<T>\n  onAcknowledged?: <A>(payload?: A) => Promise<void>\n  onPing?: <In, Out>(payload: In) => Promise<Out>\n  onPong?: <T>(payload: T) => any\n  onClose?: () => any\n}\n\nexport type UnsubscribeCallback = () => void\n\nexport interface GraphQLSubscriber<T, E = unknown> {\n  next?(data: T, extensions?: E): void\n  error?(errorValue: ClientError): void\n  complete?(): void\n}\n\ntype SubscriptionRecord = {\n  subscriber: GraphQLSubscriber<unknown, unknown>\n  query: string\n  variables?: Variables\n}\n\ntype SocketState = {\n  acknowledged: boolean\n  lastRequestId: number\n  subscriptions: { [key: string]: SubscriptionRecord }\n}\n\nexport class GraphQLWebSocketClient {\n  static PROTOCOL: string = 'graphql-transport-ws'\n\n  private socket: WebSocket\n  private socketState: SocketState = { acknowledged: false, lastRequestId: 0, subscriptions: {} }\n\n  constructor(socket: WebSocket, { onInit, onAcknowledged, onPing, onPong }: SocketHandler) {\n    this.socket = socket\n\n    socket.onopen = async (e) => {\n      this.socketState.acknowledged = false\n      this.socketState.subscriptions = {}\n      socket.send(ConnectionInit(onInit ? await onInit() : null).text)\n    }\n\n    socket.onclose = (e) => {\n      this.socketState.acknowledged = false\n      this.socketState.subscriptions = {}\n    }\n\n    socket.onerror = (e) => {\n      console.error(e)\n    }\n\n    socket.onmessage = (e) => {\n      try {\n        const message = parseMessage(e.data)\n        switch (message.type) {\n          case CONNECTION_ACK: {\n            if (this.socketState.acknowledged) {\n              console.warn('Duplicate CONNECTION_ACK message ignored')\n            } else {\n              this.socketState.acknowledged = true\n              if (onAcknowledged) onAcknowledged(message.payload)\n            }\n            return\n          }\n          case PING: {\n            if (onPing) onPing(message.payload).then((r) => socket.send(Pong(r).text))\n            else socket.send(Pong(null).text)\n            return\n          }\n          case PONG: {\n            if (onPong) onPong(message.payload)\n            return\n          }\n        }\n\n        if (!this.socketState.acknowledged) {\n          // Web-socket connection not acknowledged\n          return\n        }\n\n        if (message.id === undefined || message.id === null || !this.socketState.subscriptions[message.id]) {\n          // No subscription identifer or subscription indentifier is not found\n          return\n        }\n        const { query, variables, subscriber } = this.socketState.subscriptions[message.id]\n\n        switch (message.type) {\n          case NEXT: {\n            if (!message.payload.errors && message.payload.data) {\n              subscriber.next && subscriber.next(message.payload.data)\n            }\n            if (message.payload.errors) {\n              subscriber.error &&\n                subscriber.error(new ClientError({ ...message.payload, status: 200 }, { query, variables }))\n            } else {\n            }\n            return\n          }\n\n          case ERROR: {\n            subscriber.error &&\n              subscriber.error(\n                new ClientError({ errors: message.payload, status: 200 }, { query, variables })\n              )\n            return\n          }\n\n          case COMPLETE: {\n            subscriber.complete && subscriber.complete()\n            delete this.socketState.subscriptions[message.id]\n            return\n          }\n        }\n      } catch (e) {\n        // Unexpected errors while handling graphql-ws message\n        console.error(e)\n        socket.close(1006)\n      }\n      socket.close(4400, 'Unknown graphql-ws message.')\n    }\n  }\n\n  private makeSubscribe<T, V extends Variables, E>(\n    query: string,\n    operationName: string | undefined,\n    subscriber: GraphQLSubscriber<T, E>,\n    variables?: V\n  ): UnsubscribeCallback {\n    const subscriptionId = (this.socketState.lastRequestId++).toString()\n    this.socketState.subscriptions[subscriptionId] = { query, variables, subscriber }\n    this.socket.send(Subscribe(subscriptionId, { query, operationName, variables }).text)\n    return () => {\n      this.socket.send(Complete(subscriptionId).text)\n      delete this.socketState.subscriptions[subscriptionId]\n    }\n  }\n\n  rawRequest<T = any, V extends Variables = Variables, E = any>(\n    query: string,\n    variables?: V\n  ): Promise<{ data: T; extensions?: E }> {\n    return new Promise<{ data: T; extensions?: E; headers?: Dom.Headers; status?: number }>(\n      (resolve, reject) => {\n        let result: { data: T; extensions?: E }\n        this.rawSubscribe(\n          query,\n          {\n            next: (data: T, extensions: E) => (result = { data, extensions }),\n            error: reject,\n            complete: () => resolve(result),\n          },\n          variables\n        )\n      }\n    )\n  }\n\n  request<T = any, V extends Variables = Variables>(document: RequestDocument, variables?: V): Promise<T> {\n    return new Promise<T>((resolve, reject) => {\n      let result: T\n      this.subscribe(\n        document,\n        {\n          next: (data: T) => (result = data),\n          error: reject,\n          complete: () => resolve(result),\n        },\n        variables\n      )\n    })\n  }\n\n  subscribe<T = any, V extends Variables = Variables, E = any>(\n    document: RequestDocument,\n    subscriber: GraphQLSubscriber<T, E>,\n    variables?: V\n  ): UnsubscribeCallback {\n    const { query, operationName } = resolveRequestDocument(document)\n    return this.makeSubscribe(query, operationName, subscriber, variables)\n  }\n\n  rawSubscribe<T = any, V extends Variables = Variables, E = any>(\n    query: string,\n    subscriber: GraphQLSubscriber<T, E>,\n    variables?: V\n  ): UnsubscribeCallback {\n    return this.makeSubscribe(query, undefined, subscriber, variables)\n  }\n\n  ping(payload: Variables) {\n    this.socket.send(Ping(payload).text)\n  }\n\n  close() {\n    this.socket.close(1000)\n  }\n}\n\n// Helper functions\n\nfunction parseMessage<A = any>(data: string, f: (payload: any) => A = (a) => a): GraphQLWebSocketMessage<A> {\n  const m = GraphQLWebSocketMessage.parse<A>(data, f)\n  return m\n}\n\nfunction ConnectionInit<A>(payload?: A) {\n  return new GraphQLWebSocketMessage(CONNECTION_INIT, payload)\n}\n\nfunction Ping(payload: any) {\n  return new GraphQLWebSocketMessage(PING, payload, undefined)\n}\nfunction Pong(payload: any) {\n  return new GraphQLWebSocketMessage(PONG, payload, undefined)\n}\n\nfunction Subscribe(id: string, payload: SubscribePayload) {\n  return new GraphQLWebSocketMessage(SUBSCRIBE, payload, id)\n}\n\nfunction Complete(id: string) {\n  return new GraphQLWebSocketMessage(COMPLETE, undefined, id)\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}